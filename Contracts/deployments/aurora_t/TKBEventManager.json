{
  "address": "0xD5EE413aEEbC9535c0415c730b3512CD20c18756",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventCreationFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CurrencySendFailure",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughEventCreationFee",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventID",
          "type": "uint256"
        }
      ],
      "name": "eventCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "valueToWithdraw",
          "type": "uint256"
        }
      ],
      "name": "adminWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "allOwnersEvents",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "ticketNFTName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ticketNFTSymbol",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "desc",
              "type": "string"
            },
            {
              "internalType": "enum Types.EventTypes",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "orgName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "logo",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "email",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "date",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "website",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "ticketsSold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxCapacity",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "internalType": "struct Types.EventStruct",
          "name": "eventDetails",
          "type": "tuple"
        }
      ],
      "name": "createNewEvent",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "eventAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eventCreationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eventsSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "getOwnedTickets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "eventId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTicket",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTicket",
              "type": "uint256"
            }
          ],
          "internalType": "struct EventManager.TicketSale[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ticketStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ticketEnd",
          "type": "uint256"
        }
      ],
      "name": "recordTicketsale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newEventCreationFee",
          "type": "uint256"
        }
      ],
      "name": "setEventCreationFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newticketTransactionFee",
          "type": "uint256"
        }
      ],
      "name": "setTicketTransactionFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketTransactionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9d26fe7b3ee217279913174d04a05277bc3f94fad31b3aa52a91dcf51d3c7782",
  "receipt": {
    "to": null,
    "from": "0x4ABda0097D7545dE58608F7E36e0C1cac68b4943",
    "contractAddress": "0xD5EE413aEEbC9535c0415c730b3512CD20c18756",
    "transactionIndex": 0,
    "gasUsed": "4611056",
    "logsBloom": "0x
    "blockHash": "0x4ac1d4301b2523d1d5fc765ba72f2ffbcc713d886aadd96ab7b06d3f6a4b3b1c",
    "transactionHash": "0x9d26fe7b3ee217279913174d04a05277bc3f94fad31b3aa52a91dcf51d3c7782",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 178172218,
        "transactionHash": "0x9d26fe7b3ee217279913174d04a05277bc3f94fad31b3aa52a91dcf51d3c7782",
        "address": "0xD5EE413aEEbC9535c0415c730b3512CD20c18756",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004abda0097d7545de58608f7e36e0c1cac68b4943"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x4ac1d4301b2523d1d5fc765ba72f2ffbcc713d886aadd96ab7b06d3f6a4b3b1c"
      }
    ],
    "blockNumber": 178172218,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "10000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "0fea2ced3ef28ab345c18bc4636eb7a3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventCreationFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CurrencySendFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughEventCreationFee\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventID\",\"type\":\"uint256\"}],\"name\":\"eventCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueToWithdraw\",\"type\":\"uint256\"}],\"name\":\"adminWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"allOwnersEvents\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ticketNFTName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ticketNFTSymbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"enum Types.EventTypes\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"orgName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"logo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ticketsSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct Types.EventStruct\",\"name\":\"eventDetails\",\"type\":\"tuple\"}],\"name\":\"createNewEvent\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"eventAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventCreationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventsSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"getOwnedTickets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTicket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTicket\",\"type\":\"uint256\"}],\"internalType\":\"struct EventManager.TicketSale[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketEnd\",\"type\":\"uint256\"}],\"name\":\"recordTicketsale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newEventCreationFee\",\"type\":\"uint256\"}],\"name\":\"setEventCreationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newticketTransactionFee\",\"type\":\"uint256\"}],\"name\":\"setTicketTransactionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketTransactionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createNewEvent(string,string,(uint256,string,string,uint8,string,string,string,uint256,string,uint256,uint256,address))\":{\"details\":\"Create A new Event.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/EventManager.sol\":\"EventManager\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"},\"src/Event.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n// pragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"base64-sol/base64.sol\\\";\\r\\n// import {ITicketMarket} from \\\"./TicketMarket.sol\\\";\\r\\nimport {Types} from \\\"./Libraries/Types.sol\\\";\\r\\nimport {Errors} from \\\"./Libraries/Errors.sol\\\";\\r\\nimport {IEventManager} from \\\"./EventManager.sol\\\";\\r\\n\\r\\ncontract Event is ERC721Enumerable, ERC721URIStorage, Ownable {\\r\\n\\tusing Counters for Counters.Counter;\\r\\n\\tusing SafeERC20 for IERC20;\\r\\n\\r\\n\\tmapping(uint256 => Types.TicketCategory) public ticketCategories;\\r\\n\\r\\n\\t// mapping(uint256 => Types.Ticket) public tickets;\\r\\n\\r\\n\\tTypes.EventStruct public eventDetails;\\r\\n\\r\\n\\t// bytes32 private eventCodeHashed;\\r\\n\\r\\n\\tCounters.Counter private _ticketCategoryCounter;\\r\\n\\r\\n\\tuint256 private ticketCategoryCreationFee = 0;\\r\\n\\r\\n\\taddress payable public admin;\\r\\n\\r\\n\\tCounters.Counter private _tokenCounter;\\r\\n\\r\\n\\tuint public ticketTransactionFee = 500; // value in percent * 100 eg 500 for 5%\\r\\n\\r\\n\\t// string _tokenUri;\\r\\n\\r\\n\\t// ITicketMarket ticketMarket;\\r\\n\\r\\n\\t// event Minted(address owner, uint256 tokenId);\\r\\n\\r\\n\\t// modifier ticketCategoryExist(uint256 catId) {\\r\\n\\t// \\trequire(ticketCategories[catId].exist, \\\"E:CatNoExist\\\");\\r\\n\\t// \\t_;\\r\\n\\t// }\\r\\n\\r\\n\\tmodifier isNotOwnerOnly() {\\r\\n\\t\\trequire(msg.sender != owner(), \\\"E:IsOwner\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tconstructor(\\r\\n\\t\\tTypes.EventStruct memory _eventDetails,\\r\\n\\t\\tstring memory ticketNFTName,\\r\\n\\t\\tstring memory ticketNFTSymbol,\\r\\n\\t\\taddress payable _admin,\\r\\n\\t\\t// address _ticketMarket,\\r\\n\\t\\tuint256 _ticketCategoryCreationFee,\\r\\n\\t\\tuint _ticketTransactionFee\\r\\n\\t) ERC721(ticketNFTName, ticketNFTSymbol) {\\r\\n\\t\\t// console.log('StartiIn  1');\\r\\n\\t\\tticketCategoryCreationFee = 0.0001 * 10 ** 18; // 0.0001\\r\\n\\t\\teventDetails = _eventDetails;\\r\\n\\t\\teventDetails.ticketsSold = 0;\\r\\n\\t\\tadmin = _admin;\\r\\n\\t\\t// ticketMarket = ITicketMarket(_ticketMarket);\\r\\n\\r\\n\\t\\tticketCategoryCreationFee = _ticketCategoryCreationFee;\\r\\n\\t\\tticketTransactionFee = _ticketTransactionFee;\\r\\n\\t\\t// _tokenUri = generateTokenURI(0);\\r\\n\\t\\t_transferOwnership(_eventDetails.owner);\\r\\n\\t}\\r\\n\\r\\n\\t// Create new ticket category\\r\\n\\tfunction addTicketCategory(\\r\\n\\t\\tstring memory name,\\r\\n\\t\\tstring memory logo,\\r\\n\\t\\tuint32 maxTickets,\\r\\n\\t\\tTypes.TicketPrice[4] memory ticketPrices,\\r\\n\\t\\tbool requiresNFT,\\r\\n\\t\\taddress nftAddress,\\r\\n\\t\\tTypes.TicketNFTRequiredAttributes[4] memory nftAttributes\\r\\n\\t) public payable onlyOwner {\\r\\n\\t\\tuint256 currentTicketCategoryCounter = _ticketCategoryCounter.current();\\r\\n\\t\\tTypes.TicketCategory storage _ticketCategory = ticketCategories[currentTicketCategoryCounter];\\r\\n\\t\\t// _ticketCategory.eventId = eventDetails.id;\\r\\n\\t\\t_ticketCategory.id = currentTicketCategoryCounter;\\r\\n\\t\\t_ticketCategory.ticketsSold = 0;\\r\\n\\t\\t_ticketCategory.name = name;\\r\\n\\t\\t_ticketCategory.logo = logo;\\r\\n\\t\\t_ticketCategory.maxTickets = maxTickets;\\r\\n\\r\\n\\t\\tfor (uint t = 0; t < ticketPrices.length; t++) {\\r\\n\\t\\t\\t_ticketCategory.ticketPrices[t] = ticketPrices[t];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (requiresNFT && nftAddress == address(0)) {\\r\\n\\t\\t\\trevert Errors.INVALIDNFT();\\r\\n\\t\\t}\\r\\n\\t\\t_ticketCategory.requiresNFT = requiresNFT;\\r\\n\\r\\n\\t\\t_ticketCategory.nftAddress = nftAddress;\\r\\n\\r\\n\\t\\tfor (uint t = 0; t < nftAttributes.length; t++) {\\r\\n\\t\\t\\t_ticketCategory.nftAttributes[t] = nftAttributes[t];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t_ticketCategory.exist = true;\\r\\n\\t\\t//ticketCategories[currentTicketCategoryCounter] = _ticketCategory;\\r\\n\\r\\n\\t\\t_ticketCategoryCounter.increment();\\r\\n\\r\\n\\t\\t//pay admin\\r\\n\\t\\tif (ticketCategoryCreationFee > 0) {\\r\\n\\t\\t\\tif (msg.value < ticketCategoryCreationFee) {\\r\\n\\t\\t\\t\\trevert Errors.RequiresTicketCatgeoryFee();\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t(bool sent, ) = admin.call{value: msg.value}(\\\"\\\");\\r\\n\\r\\n\\t\\t\\tif (!sent) {\\r\\n\\t\\t\\t\\trevert Errors.CurrencySendFailure();\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit Types.NewTicketCategory(\\r\\n\\t\\t\\teventDetails.id,\\r\\n\\t\\t\\tcurrentTicketCategoryCounter,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlogo,\\r\\n\\t\\t\\t0,\\r\\n\\t\\t\\tmaxTickets,\\r\\n\\t\\t\\tticketPrices,\\r\\n\\t\\t\\trequiresNFT,\\r\\n\\t\\t\\tnftAddress\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getTicketCategoriesCount() public view returns (uint256 count) {\\r\\n\\t\\tcount = _ticketCategoryCounter.current();\\r\\n\\t}\\r\\n\\r\\n\\t// function getTicketCategory(uint index) public view returns (Types.TicketCategory memory ticketCategory) {\\r\\n\\t// \\tticketCategory = ticketCategories[index];\\r\\n\\t// }\\r\\n\\r\\n\\tfunction buyTicket(\\r\\n\\t\\tuint256 _ticketCategoryId,\\r\\n\\t\\tuint noOfTickets,\\r\\n\\t\\taddress saleCurrency,\\r\\n\\t\\tstring memory metadataUrl\\r\\n\\t) external payable /*isNotOwnerOnly*/ {\\r\\n\\t\\t// TODO: Check if eventDate has not been reached\\r\\n\\t\\trequire(ticketCategories[_ticketCategoryId].exist, \\\"E:CatNoExist\\\");\\r\\n\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tticketCategories[_ticketCategoryId].ticketsSold + noOfTickets <=\\r\\n\\t\\t\\t\\tticketCategories[_ticketCategoryId].maxTickets,\\r\\n\\t\\t\\t\\\"E:NoStock.\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tTypes.TicketCategory storage category = ticketCategories[_ticketCategoryId];\\r\\n\\t\\t// NFT gating\\r\\n\\t\\tif (category.requiresNFT && IERC721(category.nftAddress).balanceOf(msg.sender) <= 0) {\\r\\n\\t\\t\\trevert Errors.UserHasNoNFTRequired();\\r\\n\\t\\t\\t// NFT attributes check will be done client side\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tbool foundFeeCurrency = false;\\r\\n\\r\\n\\t\\tfor (uint i = 0; i < category.ticketPrices.length; i++) {\\r\\n\\t\\t\\t// console.log(category.ticketPrices[i].currency, \\\", \\\", address(saleCurrency));\\r\\n\\t\\t\\tif (category.ticketPrices[i].currency == address(saleCurrency)) {\\r\\n\\t\\t\\t\\tfoundFeeCurrency = true;\\r\\n\\t\\t\\t\\tif (category.ticketPrices[i].price > 0) {\\r\\n\\t\\t\\t\\t\\tif(saleCurrency== address(0)){\\r\\n\\t\\t\\t\\t\\t\\tconsole.log('msg.value: ', msg.value);\\r\\n\\t\\t\\t\\t\\t\\tconsole.log('Cost  1', ((noOfTickets * category.ticketPrices[i].price * ticketTransactionFee) / 10000));\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tadmin.transfer((noOfTickets * category.ticketPrices[i].price * ticketTransactionFee) / 10000);\\r\\n\\t\\t\\t\\t\\t\\t\\r\\n        \\t\\t\\t\\t// require(success, \\\"DEXLocker: Transfer to liquidityLocker failed\\\");//use call , since dexlocker is a proxy\\r\\n\\t\\t\\t\\t\\t}else{\\r\\n\\t\\t\\t\\t\\t\\tIERC20(saleCurrency).safeTransferFrom(\\r\\n\\t\\t\\t\\t\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\t\\t\\t\\t\\taddress(this),\\r\\n\\t\\t\\t\\t\\t\\t\\tnoOfTickets * category.ticketPrices[i].price\\r\\n\\t\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t\\t\\tIERC20(saleCurrency).safeTransfer(\\r\\n\\t\\t\\t\\t\\t\\t\\t// address(this),\\r\\n\\t\\t\\t\\t\\t\\t\\tadmin,\\r\\n\\t\\t\\t\\t\\t\\t\\t(noOfTickets * category.ticketPrices[i].price * ticketTransactionFee) / 10000\\r\\n\\t\\t\\t\\t\\t\\t); // 1% ticket fee\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (!foundFeeCurrency) {\\r\\n\\t\\t\\trevert Errors.WrongCurrency();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint[] memory mintedTokens = new uint[](noOfTickets);\\r\\n\\r\\n\\t\\tfor (uint n = 0; n < noOfTickets; n++) {\\r\\n\\t\\t\\t// Event is a NFT\\r\\n\\t\\t\\t// Ticket will be minted for each buyer\\r\\n\\r\\n\\t\\t\\t// uint tokenId = _tokenCounter.current();\\r\\n\\t\\t\\tconsole.log(\\\"Tkn Counter: \\\", _tokenCounter.current());\\r\\n\\r\\n\\t\\t\\t_safeMint(msg.sender, _tokenCounter.current());\\r\\n\\r\\n\\t\\t\\t_setTokenURI(_tokenCounter.current(), metadataUrl /*generateTokenURI(_ticketCategoryId)*/);\\r\\n\\r\\n\\t\\t\\t// Types.Ticket memory _ticket = Types.Ticket(_eventId, _ticketCategoryId, tokenId);\\r\\n\\t\\t\\t// tickets[tokenId] = _ticket;\\r\\n\\t\\t\\tcategory.ticketsSold++;\\r\\n\\t\\t\\teventDetails.ticketsSold++;\\r\\n\\t\\t\\tmintedTokens[n] = _tokenCounter.current();\\r\\n\\r\\n\\t\\t\\tcategory.soldTickets.push(_tokenCounter.current());\\r\\n\\t\\t\\t_tokenCounter.increment();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tIEventManager(admin).recordTicketsale(\\r\\n\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\teventDetails.id,\\r\\n\\t\\t\\tcategory.ticketsSold - noOfTickets,\\r\\n\\t\\t\\tcategory.ticketsSold\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\temit Types.NewTicket(eventDetails.id, _ticketCategoryId, msg.sender, mintedTokens);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getTicketCategory(uint catId) public view returns (Types.TicketCategory memory) {\\r\\n\\t\\treturn ticketCategories[catId];\\r\\n\\t}\\r\\n\\r\\n\\tfunction getLastMintedTicketTokenId() public view returns (uint256 tokenId) {\\r\\n\\t\\ttokenId = _tokenCounter.current();\\r\\n\\t}\\r\\n\\r\\n\\t// function listTicketOnMarketplace(uint tokenId, uint256 price) public {\\r\\n\\t// \\tticketMarket.createListingForSeller(msg.sender, address(this), tokenId, price);\\r\\n\\t// }\\r\\n\\r\\n\\t// function isListed(uint tokenId) public view returns (bool) {\\r\\n\\t// \\treturn ticketMarket.isNftListed(address(this), tokenId);\\r\\n\\t// }\\r\\n\\r\\n\\tfunction _beforeTokenTransfer(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 tokenId,\\r\\n\\t\\tuint256 batchSize\\r\\n\\t) internal override(ERC721, ERC721Enumerable) {\\r\\n\\t\\tsuper._beforeTokenTransfer(from, to, tokenId, batchSize);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\\r\\n\\t\\tsuper._burn(tokenId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction tokenURI(uint256 tokenId) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\r\\n\\t\\treturn super.tokenURI(tokenId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721Enumerable) returns (bool) {\\r\\n\\t\\treturn super.supportsInterface(interfaceId);\\r\\n\\t}\\r\\n\\r\\n\\t/** Admin  */\\r\\n\\r\\n\\tfunction adminWithdrawal(address currency, uint256 valueToWithdraw) public {\\r\\n\\t\\trequire(msg.sender == admin, \\\"ONLYADMIN\\\");\\r\\n\\t\\tif (currency == address(0)) {\\r\\n\\t\\t\\t(bool sent, bytes memory data) = admin.call{value: valueToWithdraw}(\\\"\\\");\\r\\n\\t\\t\\tif (!sent) revert Errors.CurrencySendFailure();\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tIERC20(currency).safeTransferFrom(address(this), admin, valueToWithdraw);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t// function setTicketCreationFee(uint newFee) public {\\r\\n\\t// \\trequire(admin == msg.sender, \\\"E:NOADM\\\");\\r\\n\\t// \\tticketCategoryCreationFee = newFee;\\r\\n\\t// }\\r\\n}\\r\\n\",\"keccak256\":\"0x4aca0130fb75b26f1daf322057ba6f92dbe65f2f9bc0ccc22018cdf0e11550bc\",\"license\":\"MIT\"},\"src/EventManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.26;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\r\\nimport {Types} from \\\"./Libraries/Types.sol\\\";\\r\\nimport {Errors} from \\\"./Libraries/Errors.sol\\\";\\r\\nimport \\\"./Event.sol\\\";\\r\\n\\r\\n\\r\\nerror NotEnoughEventCreationFee();\\r\\ninterface IEventManager {\\r\\n\\tfunction recordTicketsale(address eventAddress, uint eventId, uint ticketStart, uint ticketEnd) external;\\r\\n}\\r\\n\\r\\ncontract EventManager is IEventManager, Ownable {\\r\\n\\tusing Counters for Counters.Counter;\\r\\n\\r\\n\\tstruct TicketSale {\\r\\n\\t\\tuint eventId;\\r\\n\\t\\tuint startTicket;\\r\\n\\t\\tuint endTicket;\\r\\n\\t}\\r\\n\\r\\n\\t// using EnumerableMap for EnumerableMap.UintToAddressMap;\\r\\n\\r\\n\\t// Declare a set state variable\\r\\n\\t// EnumerableMap.UintToAddressMap private _events;\\r\\n\\tmapping(uint256 => address) private _events;\\r\\n\\r\\n\\tCounters.Counter private _counter;\\r\\n\\r\\n\\tmapping(address => uint256[]) private _ownersEvents; //owneraddress -> eventIndex\\r\\n\\r\\n\\tmapping(address => TicketSale[]) private _ticketSales;\\r\\n\\r\\n\\tuint256 public eventCreationFee;\\r\\n\\r\\n\\tevent eventCreated(address indexed owner, uint256 indexed eventID);\\r\\n\\r\\n\\t// ITicketMarket public ticketMarket;\\r\\n\\r\\n\\tuint256 ticketCategoryCreationFee = 0 * 10 ** 18;\\r\\n\\r\\n\\tuint public ticketTransactionFee = 500; // value in percent * 100 eg 500 for 5%\\r\\n\\r\\n\\tconstructor(uint256 _eventCreationFee) /* ITicketMarket _ticketMarket */ {\\r\\n\\t\\teventCreationFee = _eventCreationFee; // * 10 ** 18; // 0 for now\\r\\n\\t\\t// ticketMarket = _ticketMarket;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Create A new Event.\\r\\n\\t */\\r\\n\\tfunction createNewEvent(\\r\\n\\t\\tstring memory ticketNFTName,\\r\\n\\t\\tstring memory ticketNFTSymbol,\\r\\n\\t\\tTypes.EventStruct memory eventDetails\\r\\n\\t) public payable {\\r\\n\\t\\tif (eventCreationFee > 0) {\\r\\n\\t\\t\\trequire(msg.value >= eventCreationFee, NotEnoughEventCreationFee());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t_counter.increment(); // event indexes are 1 indexed, 0 index means event does not exist\\r\\n\\r\\n\\t\\teventDetails.owner = msg.sender;\\r\\n\\t\\teventDetails.id = _counter.current();\\r\\n\\t\\taddress payable newEventAddress = payable(\\r\\n\\t\\t\\taddress(\\r\\n\\t\\t\\t\\tnew Event(\\r\\n\\t\\t\\t\\t\\teventDetails,\\r\\n\\t\\t\\t\\t\\tticketNFTName,\\r\\n\\t\\t\\t\\t\\tticketNFTSymbol,\\r\\n\\t\\t\\t\\t\\tpayable(address(this)),\\r\\n\\t\\t\\t\\t\\t// address(ticketMarket),\\r\\n\\t\\t\\t\\t\\tticketCategoryCreationFee,\\r\\n\\t\\t\\t\\t\\tticketTransactionFee\\r\\n\\t\\t\\t\\t)\\r\\n\\t\\t\\t)\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t_events[_counter.current()] = newEventAddress;\\r\\n\\t\\t// _events.set(_counter.current(), newEventAddress);\\r\\n\\t\\t_ownersEvents[msg.sender].push(_counter.current());\\r\\n\\t\\temit eventCreated(msg.sender, _counter.current());\\r\\n\\t}\\r\\n\\r\\n\\t//offset\\r\\n\\tfunction allOwnersEvents(address owner, uint256 start, uint256 offset) public view returns (uint256[] memory) {\\r\\n\\t\\tuint256 size = _ownersEvents[owner].length;\\r\\n\\t\\tif (start >= size) {\\r\\n\\t\\t\\tstart = 0;\\r\\n\\t\\t}\\r\\n\\t\\tif (start + offset > size) {\\r\\n\\t\\t\\toffset = size - start;\\r\\n\\t\\t}\\r\\n\\t\\tuint256[] memory list = new uint256[](offset);\\r\\n\\r\\n\\t\\tfor (uint256 i = start; i < start + offset; i++) {\\r\\n\\t\\t\\tlist[i - start] = _ownersEvents[owner][i];\\r\\n\\t\\t}\\r\\n\\t\\treturn list;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setEventCreationFee(uint newEventCreationFee) public onlyOwner {\\r\\n\\t\\teventCreationFee = newEventCreationFee;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setTicketTransactionFee(uint newticketTransactionFee) public onlyOwner {\\r\\n\\t\\tticketTransactionFee = newticketTransactionFee;\\r\\n\\t}\\r\\n\\r\\n\\tfunction eventsSize() public view returns (uint256 size) {\\r\\n\\t\\t// return _events.length();\\r\\n\\t\\tsize = _counter.current();\\r\\n\\t}\\r\\n\\r\\n\\t// function contains(uint256 key) public view returns (bool) {\\r\\n\\t// \\treturn _events.contains(key);\\r\\n\\t// }\\r\\n\\r\\n\\tfunction eventAt(uint256 index) public view returns (address value) {\\r\\n\\t\\t// return _events.at(index);\\r\\n\\t\\treturn _events[index];\\r\\n\\t}\\r\\n\\r\\n\\t// function tryGetEventByKey(uint256 key) public view returns (bool, address) {\\r\\n\\t// \\treturn _events.tryGet(key);\\r\\n\\t// }\\r\\n\\tfunction adminWithdrawal(address currency, uint256 valueToWithdraw) public onlyOwner {\\r\\n\\t\\tif (currency == address(0)) {\\r\\n\\t\\t\\t(bool sent, bytes memory data) = msg.sender.call{value: valueToWithdraw}(\\\"\\\");\\r\\n\\t\\t\\tif (!sent) revert Errors.CurrencySendFailure();\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tIERC20(currency).transferFrom(address(this), msg.sender, valueToWithdraw);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t//reimplement to ensure rights of callers\\r\\n\\tfunction recordTicketsale(address ownerAddress, uint eventId, uint ticketStart, uint ticketEnd) public {\\r\\n\\t\\tTicketSale[] storage t = _ticketSales[ownerAddress];\\r\\n\\t\\tTicketSale memory sale = TicketSale(eventId, ticketStart, ticketEnd);\\r\\n\\t\\tt.push(sale);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getOwnedTickets(address ownerAddress) public view returns (TicketSale[] memory) {\\r\\n\\t\\treturn _ticketSales[ownerAddress];\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\r\\n\\t// function listTicketOnMarketplace(address nftAddress, uint tokenId, uint256 price) public {\\r\\n\\t// \\t//check if sender is owner of NFT\\r\\n\\t// \\tif (IERC721(nftAddress).ownerOf(tokenId) != msg.sender) {\\r\\n\\t// \\t\\trevert Errors.NotNFTOwner();\\r\\n\\t// \\t}\\r\\n\\t// \\tticketMarket.createListingForSeller(msg.sender, nftAddress, tokenId, price);\\r\\n\\t// }\\r\\n\\r\\n\\t// function isListed(address nftAddress, uint tokenId) public view returns (bool) {\\r\\n\\t// \\treturn ticketMarket.isNftListed(nftAddress, tokenId);\\r\\n\\t// }\\r\\n\\r\\n\\treceive() external payable {\\r\\n        \\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xe914e729cc0772caf5be660e5578b1d158b0d7c9ff480b91da4bcc691e98d0dd\",\"license\":\"MIT\"},\"src/Libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nlibrary Errors {\\r\\n\\terror WrongCurrency();\\r\\n\\r\\n\\terror INVALIDNFT();\\r\\n\\r\\n\\terror RequiresTicketCatgeoryFee();\\r\\n\\r\\n\\terror CurrencySendFailure();\\r\\n\\r\\n\\terror UserHasNoNFTRequired();\\r\\n\\r\\n\\terror NotNFTOwner();\\r\\n}\\r\\n\",\"keccak256\":\"0x44a899c1b622be4c6b9bde8ae6f21ed74a5c6cde9fa3642cc9086ee8211f2f91\",\"license\":\"MIT\"},\"src/Libraries/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nlibrary Types {\\r\\n\\tenum EventTypes {\\r\\n\\t\\tPHYSICAL,\\r\\n\\t\\tVIRTUAL\\r\\n\\t}\\r\\n\\r\\n\\tstruct EventStruct {\\r\\n\\t\\tuint256 id;\\r\\n\\t\\tstring name;\\r\\n\\t\\tstring desc;\\r\\n\\t\\tEventTypes eventType;\\r\\n\\t\\tstring orgName;\\r\\n\\t\\tstring logo; // Url\\r\\n\\t\\tstring email;\\r\\n\\t\\tuint256 date;\\r\\n\\t\\tstring website;\\r\\n\\t\\tuint ticketsSold;\\r\\n\\t\\tuint maxCapacity;\\r\\n\\t\\taddress owner;\\r\\n\\t}\\r\\n\\r\\n\\t// events are limited to 17 arguments, arrays count as 2\\r\\n\\tevent NewTicketCategory(\\r\\n\\t\\tuint256 indexed eventId,\\r\\n\\t\\tuint256 indexed id,\\r\\n\\t\\tstring name,\\r\\n\\t\\tstring logo,\\r\\n\\t\\tuint32 ticketsSold,\\r\\n\\t\\tuint32 maxTickets,\\r\\n\\t\\tTicketPrice[4] ticketPrices,\\r\\n\\t\\tbool requiresNFT,\\r\\n\\t\\taddress nftAddress\\r\\n\\t);\\r\\n\\r\\n\\tevent NewTicket(uint256 eventId, uint256 ticketCategoryId, address buyer, uint[] mintedTokens);\\r\\n\\r\\n\\tstruct TicketCategory {\\r\\n\\t\\tuint256 id;\\r\\n\\t\\tstring name;\\r\\n\\t\\tuint32 ticketsSold;\\r\\n\\t\\tuint32 maxTickets;\\r\\n\\t\\tTicketPrice[4] ticketPrices;\\r\\n\\t\\tbool requiresNFT;\\r\\n\\t\\taddress nftAddress;\\r\\n\\t\\tTicketNFTRequiredAttributes[4] nftAttributes;\\r\\n\\t\\tstring metadataIpfsCid;\\r\\n\\t\\tstring logo;\\r\\n\\t\\tbool exist;\\r\\n\\t\\tuint[] soldTickets;\\r\\n\\t}\\r\\n\\r\\n\\tstruct TicketPrice {\\r\\n\\t\\tuint256 price;\\r\\n\\t\\taddress currency;\\r\\n\\t}\\r\\n\\r\\n\\t// NFT Attributes required\\r\\n\\tstruct TicketNFTRequiredAttributes {\\r\\n\\t\\tstring name; //traitType\\r\\n\\t\\tstring value; // trait value\\r\\n\\t}\\r\\n\\r\\n\\tstruct Ticket {\\r\\n\\t\\tuint256 eventId;\\r\\n\\t\\tuint256 ticketCategoryId;\\r\\n\\t\\tuint256 tokenId;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x85853ae42285ffb2eda81e5d90aea7745a0e2b1c99b26cdf9c4fd95d9cbfa51f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608034609d57601f6151b938819003918201601f19168301916001600160401b0383118484101760a157808492602094604052833981010312609d57515f8054336001600160a01b0319821681178355604051939290916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a35f6006556101f460075560055561510390816100b68239f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe608080604052600436101561001c575b50361561001a575f80fd5b005b5f3560e01c9081630c3fabeb14610b0f5750806332b1ea3214610add57806337307c3d146109f15780634527746f146108ff578063516e6a20146108de57806360c04ce2146108bd5780636f5e80d8146108a0578063715018a6146108495780638da5cb5b146108225780638ff62129146108055780639c25a5e914610380578063d4cfd7b7146102de578063e4f5e2f61461018c5763f2fde38b146100c2575f61000f565b34610188576020366003190112610188576100db610b29565b6100e3610c5a565b6001600160a01b03168015610134575f80546001600160a01b03198116831782556001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b5f80fd5b34610188576060366003190112610188576101a5610b29565b6001600160a01b03165f818152600360205260409020546044359060243590808210156102d6575b806101d88484610c2c565b116102c2575b506101e882610bdc565b926101f66040519485610b5a565b82845261020283610bdc565b6020850190601f1901368237825b61021a8585610c2c565b81101561027e57825f5260036020526102368160405f20610c17565b90549060031b1c906102488582610c4d565b90875182101561026a5761021a92602060019360051b8a010152019050610210565b634e487b7160e01b5f52603260045260245ffd5b8186604051918291602083019060208452518091526040830191905f5b8181106102a9575050500390f35b825184528594506020938401939092019160010161029b565b819250906102cf91610c4d565b90836101de565b5f91506101cd565b34610188576080366003190112610188576001600160a01b036102ff610b29565b165f52600460205260405f206040519061031882610b3f565b6024358252602082016044358152604083019060643582528254600160401b81101561036c576001810180855581101561026a576002935f52600360205f2091020193518455516001840155519101555f80f35b634e487b7160e01b5f52604160045260245ffd5b6060366003190112610188576004356001600160401b038111610188576103ab903690600401610b96565b6024356001600160401b038111610188576103ca903690600401610b96565b906044356001600160401b038111610188576101806003198236030112610188576040519061018082018281106001600160401b0382111761036c576040528060040135825260248101356001600160401b038111610188576104339060043691840101610b96565b602083015260448101356001600160401b0381116101885761045b9060043691840101610b96565b60408301526064810135600281101561018857606083015260848101356001600160401b038111610188576104969060043691840101610b96565b608083015260a48101356001600160401b038111610188576104be9060043691840101610b96565b60a083015260c48101356001600160401b038111610188576104e69060043691840101610b96565b60c083015260e481013560e0830152610104810135906001600160401b0382116101885761051d6101649260043691840101610b96565b61010084015261012481013561012084015261014481013561014084015201356001600160a01b038116810361018857610160820152600554806107ea575b50600160025401806002553361016083015281526006549060075490604051948561441c8101106001600160401b0361441c8801111761036c5761441c610cb2873960c061441c870152815160c061441c880101526105f46105d7602084015161018060e061441c8b01015261024061441c8a010190610bf3565b604084015161441c890180830360bf190161010090910152610bf3565b9160608101519060028210156107d65787966106ae61067f61066261064461070b986106f5976101208e61441c01015260808701518d61014060bf1961441c83018503019161441c010152610bf3565b60a086015161441c8d0180830360bf19016101609190910152610bf3565b60c085015161441c8c0180830360bf190161018090910152610bf3565b60e08401516101a061441c8c01015261010084015160bf1961441c8c018303016101c061441c8d010152610bf3565b61012083015161441c8a016101e0810191909152610140840151610200820152610160909301516001600160a01b0316610220840152828103602090930192909252610bf3565b9061441c86018203604061441c88010152610bf3565b9130606061441c86010152608061441c8501015260a061441c8401015203905ff080156107cb576002545f52600160205260405f209060018060a01b03166bffffffffffffffffffffffff60a01b825416179055335f52600360205260405f20600254908054600160401b81101561036c5761078c91600182018155610c17565b819291549060031b91821b915f19901b1916179055600254337f6c187a21126f97259f4571813b2fd10bb11732bf880540a1b462dced7a21b5dd5f80a3005b6040513d5f823e3d90fd5b634e487b7160e01b5f52602160045260245ffd5b34106107f6578361055c565b634938dce360e01b5f5260045ffd5b34610188575f366003190112610188576020600554604051908152f35b34610188575f366003190112610188575f546040516001600160a01b039091168152602090f35b34610188575f36600319011261018857610861610c5a565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b34610188575f366003190112610188576020600754604051908152f35b34610188576020366003190112610188576108d6610c5a565b600435600555005b34610188576020366003190112610188576108f7610c5a565b600435600755005b34610188576020366003190112610188576001600160a01b03610920610b29565b165f52600460205260405f2080549061093882610bdc565b916109466040519384610b5a565b8083526020830180925f5260205f205f915b8383106109ba578486604051918291602083019060208452518091526040830191905f5b81811061098a575050500390f35b9193509160206060600192604087518051835284810151858401520151604082015201940191019184939261097c565b600360206001926040516109cd81610b3f565b85548152848601548382015260028601546040820152815201920192019190610958565b34610188576040366003190112610188575f610a0b610b29565b60243590610a17610c5a565b6001600160a01b031680158314610a73575081808092335af13d15610a6e573d610a4081610b7b565b90610a4e6040519283610b5a565b81525f60203d92013e5b15610a5f57005b63036b46f360e01b5f5260045ffd5b610a58565b606460209260405194859384926323b872dd60e01b845230600485015233602485015260448401525af180156107cb57610aa957005b6020813d602011610ad5575b81610ac260209383610b5a565b8101031261018857518015150361018857005b3d9150610ab5565b34610188576020366003190112610188576004355f526001602052602060018060a01b0360405f205416604051908152f35b34610188575f366003190112610188576020906002548152f35b600435906001600160a01b038216820361018857565b606081019081106001600160401b0382111761036c57604052565b90601f801991011681019081106001600160401b0382111761036c57604052565b6001600160401b03811161036c57601f01601f191660200190565b81601f8201121561018857803590610bad82610b7b565b92610bbb6040519485610b5a565b8284526020838301011161018857815f926020809301838601378301015290565b6001600160401b03811161036c5760051b60200190565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b805482101561026a575f5260205f2001905f90565b91908201809211610c3957565b634e487b7160e01b5f52601160045260245ffd5b91908203918211610c3957565b5f546001600160a01b03163303610c6d57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfe608060405234610d285761441c8038038061001981610d2c565b92833981019060c081830312610d285780516001600160401b038111610d285781019161018083820312610d28576040519161018083016001600160401b038111848210176106a5576040528351835260208401516001600160401b038111610d285782610088918601610d51565b6020840190815260408501516001600160401b038111610d2857836100ae918701610d51565b6040850190815260608601516002811015610d28576060860190815260808701516001600160401b038111610d2857856100e9918901610d51565b6080870190815260a08801516001600160401b038111610d28578661010f918a01610d51565b60a0880190815260c08901516001600160401b038111610d285787610135918b01610d51565b9060c0890191825260e08a01519260e08a019384526101008b01519460018060401b038611610d28578a966101606101206101748f998e908b01610d51565b986101008b01998a5201519d6101208a019e8f52610140808201519a01998a5201519860018060a01b038a168a03610d28576101608d01998a5260208b01516001600160401b038111610d28578c6101cd918d01610d51565b60408c0151909c6001600160401b038211610d28576101ed918d01610d51565b60608c01516001600160a01b0381169e91908f03610d285760808d015160a0909d01518e51909e6001600160401b0382116106a5575f5490600182811c92168015610d1e575b60208310146106875781601f849311610cb1575b50602090601f8311600114610c4e575f92610c43575b50508160011b915f199060031b1c1916175f555b8051906001600160401b0382116106a55760015490600182811c92168015610c39575b60208310146106875781601f849311610bcb575b50602090601f8311600114610b65575f92610b5a575b50508160011b915f199060031b1c1916176001555b6102dc33610da2565b6101f4601d55655af3107a4000601a5551600d55518051906001600160401b0382116106a557600e5490600182811c92168015610b50575b60208310146106875781601f849311610ae2575b50602090601f8311600114610a7c575f92610a71575b50508160011b915f199060031b1c191617600e555b518051906001600160401b0382116106a557600f5490600182811c92168015610a67575b60208310146106875781601f8493116109f9575b50602090601f8311600114610993575f92610988575b50508160011b915f199060031b1c191617600f555b5160028110156109745760ff8019601054169116176010555180519060018060401b0382116106a55760115490600182811c9216801561096a575b60208310146106875781601f8493116108fc575b50602090601f8311600114610896575f9261088b575b50508160011b915f199060031b1c1916176011555b518051906001600160401b0382116106a55760125490600182811c92168015610881575b60208310146106875781601f849311610813575b50602090601f83116001146107ad575f926107a2575b50508160011b915f199060031b1c1916176012555b518051906001600160401b0382116106a55760135490600182811c92168015610798575b60208310146106875781601f84931161072a575b50602090601f83116001146106c4575f926106b9575b50508160011b915f199060031b1c1916176013555b516014555180519096906001600160401b0381116106a557601554600181811c9116801561069b575b602082101461068757601f8111610624575b506020601f82116001146105bd5781906105a3995f926105b2575b50508160011b915f199060031b1c1916176015555b505160175551601880546001600160a01b039092166001600160a01b031992831681179091555f601655601b8054909216949094179055601a55601d55610da2565b6040516136319081610deb8239f35b015190505f8061054c565b601f1982169860155f52815f20995f5b81811061060c5750916105a39a918460019594106105f4575b505050811b01601555610561565b01515f1960f88460031b161c191690555f80806105e6565b838301518c556001909b019a602093840193016105cd565b60155f527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec475601f830160051c8101916020841061067d575b601f0160051c01905b8181106106725750610531565b5f8155600101610665565b909150819061065c565b634e487b7160e01b5f52602260045260245ffd5b90607f169061051f565b634e487b7160e01b5f52604160045260245ffd5b015190505f806104e1565b60135f9081528281209350601f198516905b81811061071257509084600195949392106106fa575b505050811b016013556104f6565b01515f1960f88460031b161c191690555f80806106ec565b929360206001819287860151815501950193016106d6565b60135f529091507f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090601f840160051c8101916020851061078e575b90601f859493920160051c01905b81811061078057506104cb565b5f8155849350600101610773565b9091508190610765565b91607f16916104b7565b015190505f8061047e565b60125f9081528281209350601f198516905b8181106107fb57509084600195949392106107e3575b505050811b01601255610493565b01515f1960f88460031b161c191690555f80806107d5565b929360206001819287860151815501950193016107bf565b60125f529091507fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec3444601f840160051c81019160208510610877575b90601f859493920160051c01905b8181106108695750610468565b5f815584935060010161085c565b909150819061084e565b91607f1691610454565b015190505f8061041b565b60115f9081528281209350601f198516905b8181106108e457509084600195949392106108cc575b505050811b01601155610430565b01515f1960f88460031b161c191690555f80806108be565b929360206001819287860151815501950193016108a8565b60115f529091507f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68601f840160051c81019160208510610960575b90601f859493920160051c01905b8181106109525750610405565b5f8155849350600101610945565b9091508190610937565b91607f16916103f1565b634e487b7160e01b5f52602160045260245ffd5b015190505f806103a1565b600f5f9081528281209350601f198516905b8181106109e157509084600195949392106109c9575b505050811b01600f556103b6565b01515f1960f88460031b161c191690555f80806109bb565b929360206001819287860151815501950193016109a5565b600f5f529091507f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802601f840160051c81019160208510610a5d575b90601f859493920160051c01905b818110610a4f575061038b565b5f8155849350600101610a42565b9091508190610a34565b91607f1691610377565b015190505f8061033e565b600e5f9081528281209350601f198516905b818110610aca5750908460019594939210610ab2575b505050811b01600e55610353565b01515f1960f88460031b161c191690555f8080610aa4565b92936020600181928786015181550195019301610a8e565b600e5f529091507fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd601f840160051c81019160208510610b46575b90601f859493920160051c01905b818110610b385750610328565b5f8155849350600101610b2b565b9091508190610b1d565b91607f1691610314565b015190505f806102be565b60015f9081528281209350601f198516905b818110610bb35750908460019594939210610b9b575b505050811b016001556102d3565b01515f1960f88460031b161c191690555f8080610b8d565b92936020600181928786015181550195019301610b77565b60015f529091507fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6601f840160051c81019160208510610c2f575b90601f859493920160051c01905b818110610c2157506102a8565b5f8155849350600101610c14565b9091508190610c06565b91607f1691610294565b015190505f8061025d565b5f8080528281209350601f198516905b818110610c995750908460019594939210610c81575b505050811b015f55610271565b01515f1960f88460031b161c191690555f8080610c74565b92936020600181928786015181550195019301610c5e565b5f80529091507f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563601f840160051c81019160208510610d14575b90601f859493920160051c01905b818110610d065750610247565b5f8155849350600101610cf9565b9091508190610ceb565b91607f1691610233565b5f80fd5b6040519190601f01601f191682016001600160401b038111838210176106a557604052565b81601f82011215610d28578051906001600160401b0382116106a557610d80601f8301601f1916602001610d2c565b9282845260208383010111610d2857815f9260208093018386015e8301015290565b600b80546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a356fe60806040526004361015610011575f80fd5b5f3560e01c806301ffc9a7146101e457806306fdde03146101df578063081812fc146101da578063095ea7b3146101d557806318160ddd146101d057806323b872dd146101cb5780632f745c59146101c657806337307c3d146101c157806342842e0e146101bc5780634f6ccce7146101b75780635b07c9a7146101b25780636352211e146101ad5780636f5e80d8146101a857806370a08231146101a3578063715018a61461019e5780638da5cb5b1461019957806395d89b4114610194578063a0426f7c1461018f578063a22cb4651461018a578063b4720c9214610185578063b88d4fde14610180578063c87b56dd1461017b578063cd6d8f8514610176578063cef2646d14610171578063def6fc5f1461016c578063e985e9c514610167578063f1386cd614610162578063f2fde38b1461015d5763f851a44014610158575f80fd5b611d10565b611c44565b611b26565b6119f3565b6119d6565b61194e565b61145a565b611306565b6112a7565b610e0c565b610c1c565b610b2c565b6108c6565b61089e565b610843565b610818565b6107fb565b6107dd565b6107c0565b610716565b6106ed565b610644565b610592565b610569565b610512565b61043e565b6103a1565b6102ca565b6101ff565b6001600160e01b03198116036101fb57565b5f80fd5b346101fb5760203660031901126101fb5760043561021c816101e9565b63ffffffff60e01b1663780e9d6360e01b8114908115610245575b506040519015158152602090f35b6380ac58cd60e01b811491508115610277575b8115610266575b505f610237565b6301ffc9a760e01b1490505f61025f565b635b5e139f60e01b81149150610258565b5f9103126101fb57565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b9060206102c7928181520190610292565b90565b346101fb575f3660031901126101fb576040515f80546102e9816114fb565b808452906001811690811561037d5750600114610321575b61031d8361031181850382610d6f565b604051918291826102b6565b0390f35b5f8080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563939250905b80821061036357509091508101602001610311610301565b91926001816020925483858801015201910190929161034b565b60ff191660208086019190915291151560051b840190910191506103119050610301565b346101fb5760203660031901126101fb5760206103bf600435611d38565b6040516001600160a01b039091168152f35b600435906001600160a01b03821682036101fb57565b604435906001600160a01b03821682036101fb57565b602435906001600160a01b03821682036101fb57565b61018435906001600160a01b03821682036101fb57565b35906001600160a01b03821682036101fb57565b346101fb5760403660031901126101fb576104576103d1565b60243561046381611f0f565b916001600160a01b0380841690821681146104c35761049593610490913314908115610497575b50611d74565b61294d565b005b6001600160a01b03165f90815260056020908152604080832033845290915281205460ff16915061048a565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b346101fb575f3660031901126101fb576020600854604051908152f35b60609060031901126101fb576004356001600160a01b03811681036101fb57906024356001600160a01b03811681036101fb579060443590565b346101fb5761049561057a3661052f565b9161058d61058884336129b7565b611de6565b612a93565b346101fb5760403660031901126101fb576105ab6103d1565b602435906105b881611f31565b8210156105eb576001600160a01b03165f9081526006602090815260408083209383529281529082902054915191825290f35b60405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608490fd5b346101fb5760403660031901126101fb5761065d6103d1565b602435601b54916106786001600160a01b0384163314611e48565b6001600160a01b0316806106cf5750601b545f9250829182918291906106ae906001600160a01b03165b6001600160a01b031690565b5af16106b8611e80565b50156106c057005b63036b46f360e01b5f5260045ffd5b610495926106e5906001600160a01b03166106a2565b903090612bf9565b346101fb576104956106fe3661052f565b906040519261070e602085610d6f565b5f845261242d565b346101fb5760203660031901126101fb576004356008548110156107665760085f527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30154604051908152602090f35b60405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608490fd5b346101fb575f3660031901126101fb576020601c54604051908152f35b346101fb5760203660031901126101fb5760206103bf600435611f0f565b346101fb575f3660031901126101fb576020601d54604051908152f35b346101fb5760203660031901126101fb57602061083b6108366103d1565b611f31565b604051908152f35b346101fb575f3660031901126101fb5761085b612c42565b600b80546001600160a01b031981169091555f906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346101fb575f3660031901126101fb57600b546040516001600160a01b039091168152602090f35b346101fb575f3660031901126101fb576040515f6001546108e6816114fb565b808452906001811690811561037d575060011461090d5761031d8361031181850382610d6f565b60015f9081527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6939250905b80821061095157509091508101602001610311610301565b919260018160209254838588010152019101909291610939565b905f905b6004821061097c57505050565b8251805182526020908101516001600160a01b03168282015260019160400193019101909161096f565b60808201915f815b600482106109bd575050505090565b909192936020806109f68387600195038652885190836109e68351604084526040840190610292565b9201519084818403910152610292565b9601920192019092916109ae565b90602080835192838152019201905f5b818110610a215750505090565b8251845260209384019390920191600101610a14565b906102c7916020815281516020820152610160610b08610af0610ad8610a6e60208701516102606040880152610280870190610292565b604087015163ffffffff166060870152606087015163ffffffff166080870152610aa0608088015160a088019061096b565b60a087015115156101a087015260c08701516001600160a01b03166101c087015260e0870151868203601f19016101e08801526109a6565b610100860151858203601f1901610200870152610292565b610120850151848203601f1901610220860152610292565b610140840151151561024084015292015190610260601f1982850301910152610a04565b346101fb5760203660031901126101fb57600435604051610b4c81610d18565b5f8152606060208201525f60408201525f6060820152608060405190610b73608083610d6f565b5f5b818110610be15761031d610bd5610bd0876060610160898960808201525f60a08201525f60c0820152610ba6611fa6565b60e082015282610100820152826101208201525f61014082015201525f52600c60205260405f2090565b6120db565b60405191829182610a37565b602090604051610bf081610d39565b5f81525f838201528185015201610b75565b801515036101fb57565b6101643590610c1a82610c02565b565b346101fb5760403660031901126101fb57610c356103d1565b602435610c4181610c02565b6001600160a01b03821691338314610cbf5781610c7c610c8d92335f52600560205260405f209060018060a01b03165f5260205260405f2090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b634e487b7160e01b5f52604160045260245ffd5b61018081019081106001600160401b03821117610d3457604052565b610d04565b604081019081106001600160401b03821117610d3457604052565b608081019081106001600160401b03821117610d3457604052565b90601f801991011681019081106001600160401b03821117610d3457604052565b60405190610c1a61018083610d6f565b6001600160401b038111610d3457601f01601f191660200190565b929192610dc782610da0565b91610dd56040519384610d6f565b8294818452818301116101fb578281602093845f960137010152565b9080601f830112156101fb578160206102c793359101610dbb565b60803660031901126101fb57602435600435610e266103e7565b906064356001600160401b0381116101fb57610e46903690600401610df1565b91610e6e610e696016610e61855f52600c60205260405f2090565b015460ff1690565b6121ef565b610ed7610ea885610ea3610e9a6002610e8f885f52600c60205260405f2090565b015463ffffffff1690565b63ffffffff1690565b61223e565b610ed0610e9a6002610ec2875f52600c60205260405f2090565b015460201c63ffffffff1690565b1015612250565b610ee9825f52600c60205260405f2090565b90600b820154610ef98160ff1690565b908161122a575b5061121b575f9060038301906001600160a01b0316825b600481106110d4575b505050156110c557610f3184612333565b9260028201916017015f5b86811061102b575050601b54610f5d91506106a2906001600160a01b031681565b93610f7f610f72600d54935463ffffffff1690565b9163ffffffff83166123f5565b94803b156101fb5760405163d4cfd7b760e01b81523360048201526024810193909352604483019590955263ffffffff166064820152925f908490608490829084905af1928315611026577f63b7afc79e6379a07137b441dd4e3db719cc1f55602e7091a6f0f97f05eb25889361100c575b50611007600d5492604051938493339185612402565b0390a1005b8061101a5f61102093610d6f565b80610288565b5f610ff1565b612298565b60019061104b601c5461104581611040612365565b612cd5565b33612d2c565b61105784601c54612e51565b61108661107061106b875463ffffffff1690565b612390565b865463ffffffff191663ffffffff909116178655565b6110996110946016546123a7565b601655565b6110b1601c54806110aa848b6123b5565b52846123c9565b6110bf6001601c5401601c55565b01610f3c565b630b27db6160e11b5f5260045ffd5b816110df82856122a3565b50600101546001600160a01b0316146110fa57600101610f17565b600193509061110982846122a3565b505415610f205787816111b95750505f8080936111986111608395611130346110406122ce565b6111938d61118b61114c61114485896122a3565b5054836122bb565b93611170611168611160601d5480986122bb565b612710900490565b6110406122f7565b601b54611185906001600160a01b03166106a2565b976122a3565b5054906122bb565b6122bb565b908282156111b0575bf115611026575b5f8080610f20565b506108fc6111a1565b6111606111fd6111f5856111e36111db6112069661118b8b9a6112169c6122a3565b303389612bf9565b601b546001600160a01b0316966122a3565b50548b6122bb565b601d54906122bb565b916001600160a01b031690612c9a565b6111a8565b6316f8624360e11b5f5260045ffd5b61124291506106a29060081c6001600160a01b031681565b6040516370a0823160e01b815233600482015290602090829060249082905afa908115611026575f91611278575b50155f610f00565b61129a915060203d6020116112a0575b6112928183610d6f565b810190612289565b5f611270565b503d611288565b346101fb5760803660031901126101fb576112c06103d1565b6112c86103fd565b90604435606435926001600160401b0384116101fb57366023850112156101fb57611300610495943690602481600401359101610dbb565b9261242d565b346101fb5760203660031901126101fb5761031d611325600435612fe7565b604051918291602083526020830190610292565b80608312156101fb5760405190611351608083610d6f565b819080610164116101fb576064915b610164831061136f5750505090565b6040838303126101fb576020604091825161138981610d39565b8535815261139883870161042a565b83820152815201920191611360565b9080601f830112156101fb57604051916113c2608084610d6f565b8260808201918383116101fb5780915b8383106113e157505050505090565b82356001600160401b0381116101fb5782016040818703126101fb576040519161140a83610d39565b81356001600160401b0381116101fb5787611426918401610df1565b83526020820135926001600160401b0384116101fb5761144b88602095869501610df1565b838201528152019201916113d2565b6101c03660031901126101fb576004356001600160401b0381116101fb57611486903690600401610df1565b6024356001600160401b0381116101fb576114a5903690600401610df1565b9060443563ffffffff811681036101fb576114bf36611339565b6114c7610c0c565b906114d0610413565b926101a435956001600160401b0387116101fb576114f56104959736906004016113a7565b95612459565b90600182811c92168015611529575b602083101461151557565b634e487b7160e01b5f52602260045260245ffd5b91607f169161150a565b604051905f82600f5491611546836114fb565b80835292600181169081156115c9575060011461156a575b610c1a92500383610d6f565b50600f5f90815290917f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8025b8183106115ad575050906020610c1a9282010161155e565b6020919350806001915483858901015201910190918492611595565b60209250610c1a94915060ff191682840152151560051b82010161155e565b604051905f82601154916115fb836114fb565b80835292600181169081156115c9575060011461161e57610c1a92500383610d6f565b5060115f90815290917f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c685b818310611661575050906020610c1a9282010161155e565b6020919350806001915483858901015201910190918492611649565b604051905f8260125491611690836114fb565b80835292600181169081156115c957506001146116b357610c1a92500383610d6f565b5060125f90815290917fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34445b8183106116f6575050906020610c1a9282010161155e565b60209193508060019154838589010152019101909184926116de565b604051905f8260135491611725836114fb565b80835292600181169081156115c9575060011461174857610c1a92500383610d6f565b5060135f90815290917f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a0905b81831061178b575050906020610c1a9282010161155e565b6020919350806001915483858901015201910190918492611773565b604051905f82601554916117ba836114fb565b80835292600181169081156115c957506001146117dd57610c1a92500383610d6f565b5060155f90815290917f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4755b818310611820575050906020610c1a9282010161155e565b6020919350806001915483858901015201910190918492611808565b9060405191825f82549261184f846114fb565b80845293600181169081156118b85750600114611874575b50610c1a92500383610d6f565b90505f9291925260205f20905f915b81831061189c575050906020610c1a928201015f611867565b6020919350806001915483858901015201910190918492611883565b905060209250610c1a94915060ff191682840152151560051b8201015f611867565b979463ffffffff61193895816119096101009b969d9e9d6101208e6119469d9881528160208201520190610292565b961660408c01521660608a0152151560808901526001600160a01b031660a088015286820360c0880152610292565b9084820360e0860152610292565b931515910152565b346101fb5760203660031901126101fb576004355f52600c60205260405f20805461031d61197e6001840161183c565b600284015493600b8101546119956014830161183c565b9060ff60166119a66015860161183c565b940154169360405197889760ff60018060a01b038560081c1694169263ffffffff808460201c169316918a6118da565b346101fb575f3660031901126101fb576020601954604051908152f35b346101fb5760403660031901126101fb57602060ff611a43611a136103d1565b611a1b6103fd565b6001600160a01b039182165f9081526005865260408082209290931681526020919091522090565b54166040519015158152f35b906002821015611a5c5752565b634e487b7160e01b5f52602160045260245ffd5b979495611ad7899b9e9d9b611b0798611aca610c1a9f9b969860606101609f9a611af39a611ab4611ac292611ae59b895261018060208a0152610180890190610292565b908782036040890152610292565b940190611a4f565b8b820360808d0152610292565b9089820360a08b0152610292565b9087820360c0890152610292565b9160e0860152848203610100860152610292565b6101208301979097526101408201526001600160a01b03909216910152565b346101fb575f3660031901126101fb57600d54604051905f82600e5491611b4c836114fb565b8083529260018116908115611c255750600114611bc6575b611b7092500383610d6f565b61031d611b7b611533565b60ff60105416611b896115e8565b611b9161167d565b611b99611712565b60145490611ba56117a7565b92601654946017549660018060a01b0360185416986040519c8d9c8d611a70565b50600e5f90815290917fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd5b818310611c09575050906020611b7092820101611b64565b6020919350806001915483858901015201910190918492611bf1565b60209250611b7094915060ff191682840152151560051b820101611b64565b346101fb5760203660031901126101fb57611c5d6103d1565b611c65612c42565b6001600160a01b03811615611cbc57600b80546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b346101fb575f3660031901126101fb57601b546040516001600160a01b039091168152602090f35b5f81815260026020526040902054611d5a906001600160a01b03161515611ec3565b5f908152600460205260409020546001600160a01b031690565b15611d7b57565b60405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608490fd5b15611ded57565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b15611e4f57565b60405162461bcd60e51b815260206004820152600960248201526827a7262ca0a226a4a760b91b6044820152606490fd5b3d15611eaa573d90611e9182610da0565b91611e9f6040519384610d6f565b82523d5f602084013e565b606090565b634e487b7160e01b5f52603260045260245ffd5b15611eca57565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b5f908152600260205260409020546001600160a01b03166102c7811515611ec3565b6001600160a01b03168015611f4f575f52600360205260405f205490565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b604051906080611fb68184610d6f565b825f5b828110611fc557505050565b602090604051611fd481610d39565b606081526060838201528184015201611fb9565b9060405191611ff683610d54565b5f835b6004821061200657505050565b6002602060019260405161201981610d39565b86548152848060a01b03858801541683820152815201930191019091611ff9565b906040519161204883610d54565b5f835b6004821061205857505050565b6002602060019260405161206b81610d39565b6120748761183c565b815261208185880161183c565b8382015281520193019101909161204b565b90604051918281549182825260208201905f5260205f20925f5b8181106120c2575050610c1a92500383610d6f565b84548352600194850194879450602090930192016120ad565b906121e760176120e9610d90565b93805485526120fa6001820161183c565b6020860152612140612133600283015461212761211a8263ffffffff1690565b63ffffffff1660408a0152565b60201c63ffffffff1690565b63ffffffff166060870152565b61214c60038201611fe8565b6080860152612191612181600b8301546121726121698260ff1690565b151560a08a0152565b60081c6001600160a01b031690565b6001600160a01b031660c0870152565b61219d600c820161203a565b60e08601526121ae6014820161183c565b6101008601526121c06015820161183c565b6101208601526121e16121d7601683015460ff1690565b1515610140870152565b01612093565b610160830152565b156121f657565b60405162461bcd60e51b815260206004820152600c60248201526b114e90d85d139bd15e1a5cdd60a21b6044820152606490fd5b634e487b7160e01b5f52601160045260245ffd5b9190820180921161224b57565b61222a565b1561225757565b60405162461bcd60e51b815260206004820152600a602482015269229d2737a9ba37b1b59760b11b6044820152606490fd5b908160209103126101fb575190565b6040513d5f823e3d90fd5b9060048110156122b65760011b01905f90565b611eaf565b8181029291811591840414171561224b57565b604051906122dd604083610d6f565b600b82526a036b9b3973b30b63ab29d160ad1b6020830152565b60405190612306604083610d6f565b6007825266436f737420203160c81b6020830152565b6001600160401b038111610d345760051b60200190565b9061233d8261231c565b61234a6040519182610d6f565b828152809261235b601f199161231c565b0190602036910137565b60405190612374604083610d6f565b600d82526c02a35b71021b7bab73a32b91d1609d1b6020830152565b63ffffffff1663ffffffff811461224b5760010190565b5f19811461224b5760010190565b80518210156122b65760209160051b010190565b90815491600160401b831015610d3457600183018082558310156122b6575f9081526020902090910155565b9190820391821161224b57565b90926080926102c795948352602083015260018060a01b031660408201528160608201520190610a04565b91610c1a93916124549361244461058884336129b7565b61244f838383612a93565b61321e565b612fc3565b91949092612465612c42565b6019549661247b885f52600c60205260405f2090565b908882556124d488600284016124988163ffffffff198154169055565b6124a588600187016126bd565b6124b289601587016126bd565b9067ffffffff0000000082549160201b169067ffffffff000000001916179055565b600382015f5b600481106126345750508680612623575b6126145761253284600b840161250d8a829060ff801983541691151516179055565b8054610100600160a81b03191660089290921b610100600160a81b0316919091179055565b600c82015f5b600481106125ed57505050601601805460ff1916600117905561255f600160195401601955565b601a54806125a5575b50907f0a93fa2f927a74a47cf4ad0fc6b28a9facb0a73c2599f408488a39328c554b18946125a092600d5497604051968796876128b6565b0390a3565b91909134106125de575f808080346125c76106a2601b5460018060a01b031690565b5af16125d1611e80565b50156106c057905f612568565b630fb2c9dd60e41b5f5260045ffd5b8061260e6125fd60019386612788565b5161260883866122a3565b906127d3565b01612538565b6318a6b01160e21b5f5260045ffd5b506001600160a01b038416156124eb565b8061265561264460019388612788565b5161264f83866122a3565b90612799565b016124da565b634e487b7160e01b5f525f60045260245ffd5b601f821161267b57505050565b5f5260205f20906020601f840160051c830193106126b3575b601f0160051c01905b8181106126a8575050565b5f815560010161269d565b9091508190612694565b91909182516001600160401b038111610d34576126e4816126de84546114fb565b8461266e565b6020601f82116001146127235781906127149394955f92612718575b50508160011b915f199060031b1c19161790565b9055565b015190505f80612700565b601f19821690612736845f5260205f2090565b915f5b81811061277057509583600195969710612758575b505050811b019055565b01515f1960f88460031b161c191690555f808061274e565b9192602060018192868b015181550194019201612739565b9060048110156122b65760051b0190565b906127ce578151815560209091015160019190910180546001600160a01b0319166001600160a01b0392909216919091179055565b61265b565b909291926127ce5782519283516001600160401b038111610d3457612802816127fc85546114fb565b8561266e565b6020601f8211600114612845579161283982602093600195610c1a98995f926127185750508160011b915f199060031b1c19161790565b84555b015191016126bd565b601f19821695612858855f5260205f2090565b965f5b81811061289e575092610c1a96976001959386938360209710612886575b505050811b01845561283c565b01515f1960f88460031b161c191690555f8080612879565b8383015189556001909801976020938401930161285b565b93916128e8906128da63ffffffff9399989795996101c088526101c0880190610292565b908682036020880152610292565b965f6040860152166060840152608083015f905b600482106129235750505015156101808201526001600160a01b039091166101a090910152565b8251805182526020908101516001600160a01b0316828201526001916040019301910190916128fc565b5f82815260046020526040902080546001600160a01b0319166001600160a01b0383161790556001600160a01b0361298483611f0f565b6001600160a01b0390921691167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9255f80a4565b6001600160a01b036129c883611f0f565b6001600160a01b0383169116818114939192908415612a09575b505082156129ef57505090565b9091506001600160a01b0390612a0490611d38565b161490565b5f9081526005602090815260408083206001600160a01b039490941683529290529081205460ff169350806129e2565b15612a4057565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b612a9c83611f0f565b6001600160a01b038083169291612ab591168314612a39565b6001600160a01b038316928315612ba857612b2c82612ad88784612b8296613257565b612aee85612ae86106a28a611f0f565b14612a39565b612b13612b03885f52600460205260405f2090565b80546001600160a01b0319169055565b6001600160a01b03165f90815260036020526040902090565b80545f190190556001600160a01b0381165f90815260036020526040902060018154019055612b63855f52600260205260405f2090565b80546001600160a01b0319166001600160a01b03909216919091179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef5f80a4565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b6040516323b872dd60e01b60208201526001600160a01b039283166024820152929091166044830152606480830193909352918152610c1a91612c3d608483610d6f565b61302f565b600b546001600160a01b03163303612c5657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830193909352918152610c1a91612c3d606483610d6f565b5f91908291612d196040518092612d056020830195632d839cb360e21b8752604060248501526064840190610292565b90604483015203601f198101835282610d6f565b51906a636f6e736f6c652e6c6f675afa50565b90604051612d3b602082610d6f565b5f81526001600160a01b038316918215612e0d57610c1a938161245494612d84612d7f612d7b845f52600260205260018060a01b0360405f205416151590565b1590565b61339e565b612d8e828461337c565b5f82815260026020526040902054612daf906001600160a01b03161561339e565b6001600160a01b0383165f90815260036020526040902060018154019055612de383612b63845f52600260205260405f2090565b5f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4613159565b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b5f818152600260205260409020549192916001600160a01b031615612f14575f52600a60205260405f2082516001600160401b038111610d3457612e99816126de84546114fb565b6020601f8211600114612ec85781906127149394955f926127185750508160011b915f199060031b1c19161790565b601f19821690612edb845f5260205f2090565b915f5b818110612efc5750958360019596971061275857505050811b019055565b9192602060018192868b015181550194019201612ede565b60405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608490fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b15612fca57565b60405162461bcd60e51b815280612fe360048201612f70565b0390fd5b5f81815260026020526040902054613009906001600160a01b03161515611ec3565b5f52600a60205261301c60405f2061183c565b5f60405161302b602082610d6f565b5290565b9061308f9160018060a01b03165f806040519361304d604086610d6f565b602085527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564602086015260208151910182855af1613089611e80565b9161356a565b80518061309a575050565b6020908201829003126101fb57602001516130b481610c02565b156130bb57565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b908160209103126101fb57516102c7816101e9565b6001600160a01b0391821681529116602082015260408101919091526080606082018190526102c792910190610292565b91823b1561321657613187926020925f604051809681958294630a85bd0160e11b8452843360048601613128565b03926001600160a01b03165af15f91816131e5575b506131cf576131a9611e80565b805190816131ca5760405162461bcd60e51b815280612fe360048201612f70565b602001fd5b6001600160e01b031916630a85bd0160e11b1490565b61320891925060203d60201161320f575b6132008183610d6f565b810190613113565b905f61319c565b503d6131f6565b505050600190565b919290803b1561324e57613187935f60209460405196879586948593630a85bd0160e11b85523360048601613128565b50505050600190565b9091906001600160a01b03811690816132a15750613274826133ea565b6001600160a01b0383168061328f575050610c1a915061347b565b03613298575050565b610c1a91613443565b6001600160a01b03841682036132b8575b50613274565b6132c181611f31565b5f1981019190821161224b575f91613319613326928685526007602052604085205483810361332d575b50846132ff885f52600760205260405f2090565b556001600160a01b03165f90815260066020526040902090565b905f5260205260405f2090565b555f6132b2565b868652600660205260408620848752602052613375604087205480613366846133198760018060a01b03165f52600660205260405f2090565b555f52600760205260405f2090565b555f6132eb565b90613386816133ea565b6001600160a01b03821661329857610c1a915061347b565b156133a557565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b600854815f52600960205260405f2055600854600160401b811015610d3457600181016008556008548110156122b65760085f527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b9061344d82611f31565b9160018060a01b03165f52600660205260405f20825f526020528060405f20555f52600760205260405f2055565b6008545f1981019181831161224b57805f5260096020528160405f20549310156122b65760085f527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee2820154918310156122b6577ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee383018290555f91825260096020526040808320939093558152908120556008548015613556575f198101906008548210156122b65760085f8181527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee29092019190915555565b634e487b7160e01b5f52603160045260245ffd5b919290156135cc575081511561357e575090565b3b156135875790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156135df5750805190602001fd5b60405162461bcd60e51b8152908190612fe390600483016102b656fea26469706673582212202a0b3d60b439f460d16f8edd02e1cde1edea261ea5c7d4916dd0359a3651c59164736f6c634300081a0033a2646970667358221220d2e0c5b1867601a07258e014103cb37f4a96ea2c059220817b05cc58675149f964736f6c634300081a0033",
  "deployedBytecode": "0x608080604052600436101561001c575b50361561001a575f80fd5b005b5f3560e01c9081630c3fabeb14610b0f5750806332b1ea3214610add57806337307c3d146109f15780634527746f146108ff578063516e6a20146108de57806360c04ce2146108bd5780636f5e80d8146108a0578063715018a6146108495780638da5cb5b146108225780638ff62129146108055780639c25a5e914610380578063d4cfd7b7146102de578063e4f5e2f61461018c5763f2fde38b146100c2575f61000f565b34610188576020366003190112610188576100db610b29565b6100e3610c5a565b6001600160a01b03168015610134575f80546001600160a01b03198116831782556001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b5f80fd5b34610188576060366003190112610188576101a5610b29565b6001600160a01b03165f818152600360205260409020546044359060243590808210156102d6575b806101d88484610c2c565b116102c2575b506101e882610bdc565b926101f66040519485610b5a565b82845261020283610bdc565b6020850190601f1901368237825b61021a8585610c2c565b81101561027e57825f5260036020526102368160405f20610c17565b90549060031b1c906102488582610c4d565b90875182101561026a5761021a92602060019360051b8a010152019050610210565b634e487b7160e01b5f52603260045260245ffd5b8186604051918291602083019060208452518091526040830191905f5b8181106102a9575050500390f35b825184528594506020938401939092019160010161029b565b819250906102cf91610c4d565b90836101de565b5f91506101cd565b34610188576080366003190112610188576001600160a01b036102ff610b29565b165f52600460205260405f206040519061031882610b3f565b6024358252602082016044358152604083019060643582528254600160401b81101561036c576001810180855581101561026a576002935f52600360205f2091020193518455516001840155519101555f80f35b634e487b7160e01b5f52604160045260245ffd5b6060366003190112610188576004356001600160401b038111610188576103ab903690600401610b96565b6024356001600160401b038111610188576103ca903690600401610b96565b906044356001600160401b038111610188576101806003198236030112610188576040519061018082018281106001600160401b0382111761036c576040528060040135825260248101356001600160401b038111610188576104339060043691840101610b96565b602083015260448101356001600160401b0381116101885761045b9060043691840101610b96565b60408301526064810135600281101561018857606083015260848101356001600160401b038111610188576104969060043691840101610b96565b608083015260a48101356001600160401b038111610188576104be9060043691840101610b96565b60a083015260c48101356001600160401b038111610188576104e69060043691840101610b96565b60c083015260e481013560e0830152610104810135906001600160401b0382116101885761051d6101649260043691840101610b96565b61010084015261012481013561012084015261014481013561014084015201356001600160a01b038116810361018857610160820152600554806107ea575b50600160025401806002553361016083015281526006549060075490604051948561441c8101106001600160401b0361441c8801111761036c5761441c610cb2873960c061441c870152815160c061441c880101526105f46105d7602084015161018060e061441c8b01015261024061441c8a010190610bf3565b604084015161441c890180830360bf190161010090910152610bf3565b9160608101519060028210156107d65787966106ae61067f61066261064461070b986106f5976101208e61441c01015260808701518d61014060bf1961441c83018503019161441c010152610bf3565b60a086015161441c8d0180830360bf19016101609190910152610bf3565b60c085015161441c8c0180830360bf190161018090910152610bf3565b60e08401516101a061441c8c01015261010084015160bf1961441c8c018303016101c061441c8d010152610bf3565b61012083015161441c8a016101e0810191909152610140840151610200820152610160909301516001600160a01b0316610220840152828103602090930192909252610bf3565b9061441c86018203604061441c88010152610bf3565b9130606061441c86010152608061441c8501015260a061441c8401015203905ff080156107cb576002545f52600160205260405f209060018060a01b03166bffffffffffffffffffffffff60a01b825416179055335f52600360205260405f20600254908054600160401b81101561036c5761078c91600182018155610c17565b819291549060031b91821b915f19901b1916179055600254337f6c187a21126f97259f4571813b2fd10bb11732bf880540a1b462dced7a21b5dd5f80a3005b6040513d5f823e3d90fd5b634e487b7160e01b5f52602160045260245ffd5b34106107f6578361055c565b634938dce360e01b5f5260045ffd5b34610188575f366003190112610188576020600554604051908152f35b34610188575f366003190112610188575f546040516001600160a01b039091168152602090f35b34610188575f36600319011261018857610861610c5a565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b34610188575f366003190112610188576020600754604051908152f35b34610188576020366003190112610188576108d6610c5a565b600435600555005b34610188576020366003190112610188576108f7610c5a565b600435600755005b34610188576020366003190112610188576001600160a01b03610920610b29565b165f52600460205260405f2080549061093882610bdc565b916109466040519384610b5a565b8083526020830180925f5260205f205f915b8383106109ba578486604051918291602083019060208452518091526040830191905f5b81811061098a575050500390f35b9193509160206060600192604087518051835284810151858401520151604082015201940191019184939261097c565b600360206001926040516109cd81610b3f565b85548152848601548382015260028601546040820152815201920192019190610958565b34610188576040366003190112610188575f610a0b610b29565b60243590610a17610c5a565b6001600160a01b031680158314610a73575081808092335af13d15610a6e573d610a4081610b7b565b90610a4e6040519283610b5a565b81525f60203d92013e5b15610a5f57005b63036b46f360e01b5f5260045ffd5b610a58565b606460209260405194859384926323b872dd60e01b845230600485015233602485015260448401525af180156107cb57610aa957005b6020813d602011610ad5575b81610ac260209383610b5a565b8101031261018857518015150361018857005b3d9150610ab5565b34610188576020366003190112610188576004355f526001602052602060018060a01b0360405f205416604051908152f35b34610188575f366003190112610188576020906002548152f35b600435906001600160a01b038216820361018857565b606081019081106001600160401b0382111761036c57604052565b90601f801991011681019081106001600160401b0382111761036c57604052565b6001600160401b03811161036c57601f01601f191660200190565b81601f8201121561018857803590610bad82610b7b565b92610bbb6040519485610b5a565b8284526020838301011161018857815f926020809301838601378301015290565b6001600160401b03811161036c5760051b60200190565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b805482101561026a575f5260205f2001905f90565b91908201809211610c3957565b634e487b7160e01b5f52601160045260245ffd5b91908203918211610c3957565b5f546001600160a01b03163303610c6d57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfe608060405234610d285761441c8038038061001981610d2c565b92833981019060c081830312610d285780516001600160401b038111610d285781019161018083820312610d28576040519161018083016001600160401b038111848210176106a5576040528351835260208401516001600160401b038111610d285782610088918601610d51565b6020840190815260408501516001600160401b038111610d2857836100ae918701610d51565b6040850190815260608601516002811015610d28576060860190815260808701516001600160401b038111610d2857856100e9918901610d51565b6080870190815260a08801516001600160401b038111610d28578661010f918a01610d51565b60a0880190815260c08901516001600160401b038111610d285787610135918b01610d51565b9060c0890191825260e08a01519260e08a019384526101008b01519460018060401b038611610d28578a966101606101206101748f998e908b01610d51565b986101008b01998a5201519d6101208a019e8f52610140808201519a01998a5201519860018060a01b038a168a03610d28576101608d01998a5260208b01516001600160401b038111610d28578c6101cd918d01610d51565b60408c0151909c6001600160401b038211610d28576101ed918d01610d51565b60608c01516001600160a01b0381169e91908f03610d285760808d015160a0909d01518e51909e6001600160401b0382116106a5575f5490600182811c92168015610d1e575b60208310146106875781601f849311610cb1575b50602090601f8311600114610c4e575f92610c43575b50508160011b915f199060031b1c1916175f555b8051906001600160401b0382116106a55760015490600182811c92168015610c39575b60208310146106875781601f849311610bcb575b50602090601f8311600114610b65575f92610b5a575b50508160011b915f199060031b1c1916176001555b6102dc33610da2565b6101f4601d55655af3107a4000601a5551600d55518051906001600160401b0382116106a557600e5490600182811c92168015610b50575b60208310146106875781601f849311610ae2575b50602090601f8311600114610a7c575f92610a71575b50508160011b915f199060031b1c191617600e555b518051906001600160401b0382116106a557600f5490600182811c92168015610a67575b60208310146106875781601f8493116109f9575b50602090601f8311600114610993575f92610988575b50508160011b915f199060031b1c191617600f555b5160028110156109745760ff8019601054169116176010555180519060018060401b0382116106a55760115490600182811c9216801561096a575b60208310146106875781601f8493116108fc575b50602090601f8311600114610896575f9261088b575b50508160011b915f199060031b1c1916176011555b518051906001600160401b0382116106a55760125490600182811c92168015610881575b60208310146106875781601f849311610813575b50602090601f83116001146107ad575f926107a2575b50508160011b915f199060031b1c1916176012555b518051906001600160401b0382116106a55760135490600182811c92168015610798575b60208310146106875781601f84931161072a575b50602090601f83116001146106c4575f926106b9575b50508160011b915f199060031b1c1916176013555b516014555180519096906001600160401b0381116106a557601554600181811c9116801561069b575b602082101461068757601f8111610624575b506020601f82116001146105bd5781906105a3995f926105b2575b50508160011b915f199060031b1c1916176015555b505160175551601880546001600160a01b039092166001600160a01b031992831681179091555f601655601b8054909216949094179055601a55601d55610da2565b6040516136319081610deb8239f35b015190505f8061054c565b601f1982169860155f52815f20995f5b81811061060c5750916105a39a918460019594106105f4575b505050811b01601555610561565b01515f1960f88460031b161c191690555f80806105e6565b838301518c556001909b019a602093840193016105cd565b60155f527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec475601f830160051c8101916020841061067d575b601f0160051c01905b8181106106725750610531565b5f8155600101610665565b909150819061065c565b634e487b7160e01b5f52602260045260245ffd5b90607f169061051f565b634e487b7160e01b5f52604160045260245ffd5b015190505f806104e1565b60135f9081528281209350601f198516905b81811061071257509084600195949392106106fa575b505050811b016013556104f6565b01515f1960f88460031b161c191690555f80806106ec565b929360206001819287860151815501950193016106d6565b60135f529091507f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090601f840160051c8101916020851061078e575b90601f859493920160051c01905b81811061078057506104cb565b5f8155849350600101610773565b9091508190610765565b91607f16916104b7565b015190505f8061047e565b60125f9081528281209350601f198516905b8181106107fb57509084600195949392106107e3575b505050811b01601255610493565b01515f1960f88460031b161c191690555f80806107d5565b929360206001819287860151815501950193016107bf565b60125f529091507fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec3444601f840160051c81019160208510610877575b90601f859493920160051c01905b8181106108695750610468565b5f815584935060010161085c565b909150819061084e565b91607f1691610454565b015190505f8061041b565b60115f9081528281209350601f198516905b8181106108e457509084600195949392106108cc575b505050811b01601155610430565b01515f1960f88460031b161c191690555f80806108be565b929360206001819287860151815501950193016108a8565b60115f529091507f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68601f840160051c81019160208510610960575b90601f859493920160051c01905b8181106109525750610405565b5f8155849350600101610945565b9091508190610937565b91607f16916103f1565b634e487b7160e01b5f52602160045260245ffd5b015190505f806103a1565b600f5f9081528281209350601f198516905b8181106109e157509084600195949392106109c9575b505050811b01600f556103b6565b01515f1960f88460031b161c191690555f80806109bb565b929360206001819287860151815501950193016109a5565b600f5f529091507f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802601f840160051c81019160208510610a5d575b90601f859493920160051c01905b818110610a4f575061038b565b5f8155849350600101610a42565b9091508190610a34565b91607f1691610377565b015190505f8061033e565b600e5f9081528281209350601f198516905b818110610aca5750908460019594939210610ab2575b505050811b01600e55610353565b01515f1960f88460031b161c191690555f8080610aa4565b92936020600181928786015181550195019301610a8e565b600e5f529091507fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd601f840160051c81019160208510610b46575b90601f859493920160051c01905b818110610b385750610328565b5f8155849350600101610b2b565b9091508190610b1d565b91607f1691610314565b015190505f806102be565b60015f9081528281209350601f198516905b818110610bb35750908460019594939210610b9b575b505050811b016001556102d3565b01515f1960f88460031b161c191690555f8080610b8d565b92936020600181928786015181550195019301610b77565b60015f529091507fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6601f840160051c81019160208510610c2f575b90601f859493920160051c01905b818110610c2157506102a8565b5f8155849350600101610c14565b9091508190610c06565b91607f1691610294565b015190505f8061025d565b5f8080528281209350601f198516905b818110610c995750908460019594939210610c81575b505050811b015f55610271565b01515f1960f88460031b161c191690555f8080610c74565b92936020600181928786015181550195019301610c5e565b5f80529091507f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563601f840160051c81019160208510610d14575b90601f859493920160051c01905b818110610d065750610247565b5f8155849350600101610cf9565b9091508190610ceb565b91607f1691610233565b5f80fd5b6040519190601f01601f191682016001600160401b038111838210176106a557604052565b81601f82011215610d28578051906001600160401b0382116106a557610d80601f8301601f1916602001610d2c565b9282845260208383010111610d2857815f9260208093018386015e8301015290565b600b80546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a356fe60806040526004361015610011575f80fd5b5f3560e01c806301ffc9a7146101e457806306fdde03146101df578063081812fc146101da578063095ea7b3146101d557806318160ddd146101d057806323b872dd146101cb5780632f745c59146101c657806337307c3d146101c157806342842e0e146101bc5780634f6ccce7146101b75780635b07c9a7146101b25780636352211e146101ad5780636f5e80d8146101a857806370a08231146101a3578063715018a61461019e5780638da5cb5b1461019957806395d89b4114610194578063a0426f7c1461018f578063a22cb4651461018a578063b4720c9214610185578063b88d4fde14610180578063c87b56dd1461017b578063cd6d8f8514610176578063cef2646d14610171578063def6fc5f1461016c578063e985e9c514610167578063f1386cd614610162578063f2fde38b1461015d5763f851a44014610158575f80fd5b611d10565b611c44565b611b26565b6119f3565b6119d6565b61194e565b61145a565b611306565b6112a7565b610e0c565b610c1c565b610b2c565b6108c6565b61089e565b610843565b610818565b6107fb565b6107dd565b6107c0565b610716565b6106ed565b610644565b610592565b610569565b610512565b61043e565b6103a1565b6102ca565b6101ff565b6001600160e01b03198116036101fb57565b5f80fd5b346101fb5760203660031901126101fb5760043561021c816101e9565b63ffffffff60e01b1663780e9d6360e01b8114908115610245575b506040519015158152602090f35b6380ac58cd60e01b811491508115610277575b8115610266575b505f610237565b6301ffc9a760e01b1490505f61025f565b635b5e139f60e01b81149150610258565b5f9103126101fb57565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b9060206102c7928181520190610292565b90565b346101fb575f3660031901126101fb576040515f80546102e9816114fb565b808452906001811690811561037d5750600114610321575b61031d8361031181850382610d6f565b604051918291826102b6565b0390f35b5f8080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563939250905b80821061036357509091508101602001610311610301565b91926001816020925483858801015201910190929161034b565b60ff191660208086019190915291151560051b840190910191506103119050610301565b346101fb5760203660031901126101fb5760206103bf600435611d38565b6040516001600160a01b039091168152f35b600435906001600160a01b03821682036101fb57565b604435906001600160a01b03821682036101fb57565b602435906001600160a01b03821682036101fb57565b61018435906001600160a01b03821682036101fb57565b35906001600160a01b03821682036101fb57565b346101fb5760403660031901126101fb576104576103d1565b60243561046381611f0f565b916001600160a01b0380841690821681146104c35761049593610490913314908115610497575b50611d74565b61294d565b005b6001600160a01b03165f90815260056020908152604080832033845290915281205460ff16915061048a565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b346101fb575f3660031901126101fb576020600854604051908152f35b60609060031901126101fb576004356001600160a01b03811681036101fb57906024356001600160a01b03811681036101fb579060443590565b346101fb5761049561057a3661052f565b9161058d61058884336129b7565b611de6565b612a93565b346101fb5760403660031901126101fb576105ab6103d1565b602435906105b881611f31565b8210156105eb576001600160a01b03165f9081526006602090815260408083209383529281529082902054915191825290f35b60405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608490fd5b346101fb5760403660031901126101fb5761065d6103d1565b602435601b54916106786001600160a01b0384163314611e48565b6001600160a01b0316806106cf5750601b545f9250829182918291906106ae906001600160a01b03165b6001600160a01b031690565b5af16106b8611e80565b50156106c057005b63036b46f360e01b5f5260045ffd5b610495926106e5906001600160a01b03166106a2565b903090612bf9565b346101fb576104956106fe3661052f565b906040519261070e602085610d6f565b5f845261242d565b346101fb5760203660031901126101fb576004356008548110156107665760085f527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30154604051908152602090f35b60405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608490fd5b346101fb575f3660031901126101fb576020601c54604051908152f35b346101fb5760203660031901126101fb5760206103bf600435611f0f565b346101fb575f3660031901126101fb576020601d54604051908152f35b346101fb5760203660031901126101fb57602061083b6108366103d1565b611f31565b604051908152f35b346101fb575f3660031901126101fb5761085b612c42565b600b80546001600160a01b031981169091555f906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346101fb575f3660031901126101fb57600b546040516001600160a01b039091168152602090f35b346101fb575f3660031901126101fb576040515f6001546108e6816114fb565b808452906001811690811561037d575060011461090d5761031d8361031181850382610d6f565b60015f9081527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6939250905b80821061095157509091508101602001610311610301565b919260018160209254838588010152019101909291610939565b905f905b6004821061097c57505050565b8251805182526020908101516001600160a01b03168282015260019160400193019101909161096f565b60808201915f815b600482106109bd575050505090565b909192936020806109f68387600195038652885190836109e68351604084526040840190610292565b9201519084818403910152610292565b9601920192019092916109ae565b90602080835192838152019201905f5b818110610a215750505090565b8251845260209384019390920191600101610a14565b906102c7916020815281516020820152610160610b08610af0610ad8610a6e60208701516102606040880152610280870190610292565b604087015163ffffffff166060870152606087015163ffffffff166080870152610aa0608088015160a088019061096b565b60a087015115156101a087015260c08701516001600160a01b03166101c087015260e0870151868203601f19016101e08801526109a6565b610100860151858203601f1901610200870152610292565b610120850151848203601f1901610220860152610292565b610140840151151561024084015292015190610260601f1982850301910152610a04565b346101fb5760203660031901126101fb57600435604051610b4c81610d18565b5f8152606060208201525f60408201525f6060820152608060405190610b73608083610d6f565b5f5b818110610be15761031d610bd5610bd0876060610160898960808201525f60a08201525f60c0820152610ba6611fa6565b60e082015282610100820152826101208201525f61014082015201525f52600c60205260405f2090565b6120db565b60405191829182610a37565b602090604051610bf081610d39565b5f81525f838201528185015201610b75565b801515036101fb57565b6101643590610c1a82610c02565b565b346101fb5760403660031901126101fb57610c356103d1565b602435610c4181610c02565b6001600160a01b03821691338314610cbf5781610c7c610c8d92335f52600560205260405f209060018060a01b03165f5260205260405f2090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b634e487b7160e01b5f52604160045260245ffd5b61018081019081106001600160401b03821117610d3457604052565b610d04565b604081019081106001600160401b03821117610d3457604052565b608081019081106001600160401b03821117610d3457604052565b90601f801991011681019081106001600160401b03821117610d3457604052565b60405190610c1a61018083610d6f565b6001600160401b038111610d3457601f01601f191660200190565b929192610dc782610da0565b91610dd56040519384610d6f565b8294818452818301116101fb578281602093845f960137010152565b9080601f830112156101fb578160206102c793359101610dbb565b60803660031901126101fb57602435600435610e266103e7565b906064356001600160401b0381116101fb57610e46903690600401610df1565b91610e6e610e696016610e61855f52600c60205260405f2090565b015460ff1690565b6121ef565b610ed7610ea885610ea3610e9a6002610e8f885f52600c60205260405f2090565b015463ffffffff1690565b63ffffffff1690565b61223e565b610ed0610e9a6002610ec2875f52600c60205260405f2090565b015460201c63ffffffff1690565b1015612250565b610ee9825f52600c60205260405f2090565b90600b820154610ef98160ff1690565b908161122a575b5061121b575f9060038301906001600160a01b0316825b600481106110d4575b505050156110c557610f3184612333565b9260028201916017015f5b86811061102b575050601b54610f5d91506106a2906001600160a01b031681565b93610f7f610f72600d54935463ffffffff1690565b9163ffffffff83166123f5565b94803b156101fb5760405163d4cfd7b760e01b81523360048201526024810193909352604483019590955263ffffffff166064820152925f908490608490829084905af1928315611026577f63b7afc79e6379a07137b441dd4e3db719cc1f55602e7091a6f0f97f05eb25889361100c575b50611007600d5492604051938493339185612402565b0390a1005b8061101a5f61102093610d6f565b80610288565b5f610ff1565b612298565b60019061104b601c5461104581611040612365565b612cd5565b33612d2c565b61105784601c54612e51565b61108661107061106b875463ffffffff1690565b612390565b865463ffffffff191663ffffffff909116178655565b6110996110946016546123a7565b601655565b6110b1601c54806110aa848b6123b5565b52846123c9565b6110bf6001601c5401601c55565b01610f3c565b630b27db6160e11b5f5260045ffd5b816110df82856122a3565b50600101546001600160a01b0316146110fa57600101610f17565b600193509061110982846122a3565b505415610f205787816111b95750505f8080936111986111608395611130346110406122ce565b6111938d61118b61114c61114485896122a3565b5054836122bb565b93611170611168611160601d5480986122bb565b612710900490565b6110406122f7565b601b54611185906001600160a01b03166106a2565b976122a3565b5054906122bb565b6122bb565b908282156111b0575bf115611026575b5f8080610f20565b506108fc6111a1565b6111606111fd6111f5856111e36111db6112069661118b8b9a6112169c6122a3565b303389612bf9565b601b546001600160a01b0316966122a3565b50548b6122bb565b601d54906122bb565b916001600160a01b031690612c9a565b6111a8565b6316f8624360e11b5f5260045ffd5b61124291506106a29060081c6001600160a01b031681565b6040516370a0823160e01b815233600482015290602090829060249082905afa908115611026575f91611278575b50155f610f00565b61129a915060203d6020116112a0575b6112928183610d6f565b810190612289565b5f611270565b503d611288565b346101fb5760803660031901126101fb576112c06103d1565b6112c86103fd565b90604435606435926001600160401b0384116101fb57366023850112156101fb57611300610495943690602481600401359101610dbb565b9261242d565b346101fb5760203660031901126101fb5761031d611325600435612fe7565b604051918291602083526020830190610292565b80608312156101fb5760405190611351608083610d6f565b819080610164116101fb576064915b610164831061136f5750505090565b6040838303126101fb576020604091825161138981610d39565b8535815261139883870161042a565b83820152815201920191611360565b9080601f830112156101fb57604051916113c2608084610d6f565b8260808201918383116101fb5780915b8383106113e157505050505090565b82356001600160401b0381116101fb5782016040818703126101fb576040519161140a83610d39565b81356001600160401b0381116101fb5787611426918401610df1565b83526020820135926001600160401b0384116101fb5761144b88602095869501610df1565b838201528152019201916113d2565b6101c03660031901126101fb576004356001600160401b0381116101fb57611486903690600401610df1565b6024356001600160401b0381116101fb576114a5903690600401610df1565b9060443563ffffffff811681036101fb576114bf36611339565b6114c7610c0c565b906114d0610413565b926101a435956001600160401b0387116101fb576114f56104959736906004016113a7565b95612459565b90600182811c92168015611529575b602083101461151557565b634e487b7160e01b5f52602260045260245ffd5b91607f169161150a565b604051905f82600f5491611546836114fb565b80835292600181169081156115c9575060011461156a575b610c1a92500383610d6f565b50600f5f90815290917f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8025b8183106115ad575050906020610c1a9282010161155e565b6020919350806001915483858901015201910190918492611595565b60209250610c1a94915060ff191682840152151560051b82010161155e565b604051905f82601154916115fb836114fb565b80835292600181169081156115c9575060011461161e57610c1a92500383610d6f565b5060115f90815290917f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c685b818310611661575050906020610c1a9282010161155e565b6020919350806001915483858901015201910190918492611649565b604051905f8260125491611690836114fb565b80835292600181169081156115c957506001146116b357610c1a92500383610d6f565b5060125f90815290917fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34445b8183106116f6575050906020610c1a9282010161155e565b60209193508060019154838589010152019101909184926116de565b604051905f8260135491611725836114fb565b80835292600181169081156115c9575060011461174857610c1a92500383610d6f565b5060135f90815290917f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a0905b81831061178b575050906020610c1a9282010161155e565b6020919350806001915483858901015201910190918492611773565b604051905f82601554916117ba836114fb565b80835292600181169081156115c957506001146117dd57610c1a92500383610d6f565b5060155f90815290917f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4755b818310611820575050906020610c1a9282010161155e565b6020919350806001915483858901015201910190918492611808565b9060405191825f82549261184f846114fb565b80845293600181169081156118b85750600114611874575b50610c1a92500383610d6f565b90505f9291925260205f20905f915b81831061189c575050906020610c1a928201015f611867565b6020919350806001915483858901015201910190918492611883565b905060209250610c1a94915060ff191682840152151560051b8201015f611867565b979463ffffffff61193895816119096101009b969d9e9d6101208e6119469d9881528160208201520190610292565b961660408c01521660608a0152151560808901526001600160a01b031660a088015286820360c0880152610292565b9084820360e0860152610292565b931515910152565b346101fb5760203660031901126101fb576004355f52600c60205260405f20805461031d61197e6001840161183c565b600284015493600b8101546119956014830161183c565b9060ff60166119a66015860161183c565b940154169360405197889760ff60018060a01b038560081c1694169263ffffffff808460201c169316918a6118da565b346101fb575f3660031901126101fb576020601954604051908152f35b346101fb5760403660031901126101fb57602060ff611a43611a136103d1565b611a1b6103fd565b6001600160a01b039182165f9081526005865260408082209290931681526020919091522090565b54166040519015158152f35b906002821015611a5c5752565b634e487b7160e01b5f52602160045260245ffd5b979495611ad7899b9e9d9b611b0798611aca610c1a9f9b969860606101609f9a611af39a611ab4611ac292611ae59b895261018060208a0152610180890190610292565b908782036040890152610292565b940190611a4f565b8b820360808d0152610292565b9089820360a08b0152610292565b9087820360c0890152610292565b9160e0860152848203610100860152610292565b6101208301979097526101408201526001600160a01b03909216910152565b346101fb575f3660031901126101fb57600d54604051905f82600e5491611b4c836114fb565b8083529260018116908115611c255750600114611bc6575b611b7092500383610d6f565b61031d611b7b611533565b60ff60105416611b896115e8565b611b9161167d565b611b99611712565b60145490611ba56117a7565b92601654946017549660018060a01b0360185416986040519c8d9c8d611a70565b50600e5f90815290917fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd5b818310611c09575050906020611b7092820101611b64565b6020919350806001915483858901015201910190918492611bf1565b60209250611b7094915060ff191682840152151560051b820101611b64565b346101fb5760203660031901126101fb57611c5d6103d1565b611c65612c42565b6001600160a01b03811615611cbc57600b80546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b346101fb575f3660031901126101fb57601b546040516001600160a01b039091168152602090f35b5f81815260026020526040902054611d5a906001600160a01b03161515611ec3565b5f908152600460205260409020546001600160a01b031690565b15611d7b57565b60405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608490fd5b15611ded57565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b15611e4f57565b60405162461bcd60e51b815260206004820152600960248201526827a7262ca0a226a4a760b91b6044820152606490fd5b3d15611eaa573d90611e9182610da0565b91611e9f6040519384610d6f565b82523d5f602084013e565b606090565b634e487b7160e01b5f52603260045260245ffd5b15611eca57565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b5f908152600260205260409020546001600160a01b03166102c7811515611ec3565b6001600160a01b03168015611f4f575f52600360205260405f205490565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b604051906080611fb68184610d6f565b825f5b828110611fc557505050565b602090604051611fd481610d39565b606081526060838201528184015201611fb9565b9060405191611ff683610d54565b5f835b6004821061200657505050565b6002602060019260405161201981610d39565b86548152848060a01b03858801541683820152815201930191019091611ff9565b906040519161204883610d54565b5f835b6004821061205857505050565b6002602060019260405161206b81610d39565b6120748761183c565b815261208185880161183c565b8382015281520193019101909161204b565b90604051918281549182825260208201905f5260205f20925f5b8181106120c2575050610c1a92500383610d6f565b84548352600194850194879450602090930192016120ad565b906121e760176120e9610d90565b93805485526120fa6001820161183c565b6020860152612140612133600283015461212761211a8263ffffffff1690565b63ffffffff1660408a0152565b60201c63ffffffff1690565b63ffffffff166060870152565b61214c60038201611fe8565b6080860152612191612181600b8301546121726121698260ff1690565b151560a08a0152565b60081c6001600160a01b031690565b6001600160a01b031660c0870152565b61219d600c820161203a565b60e08601526121ae6014820161183c565b6101008601526121c06015820161183c565b6101208601526121e16121d7601683015460ff1690565b1515610140870152565b01612093565b610160830152565b156121f657565b60405162461bcd60e51b815260206004820152600c60248201526b114e90d85d139bd15e1a5cdd60a21b6044820152606490fd5b634e487b7160e01b5f52601160045260245ffd5b9190820180921161224b57565b61222a565b1561225757565b60405162461bcd60e51b815260206004820152600a602482015269229d2737a9ba37b1b59760b11b6044820152606490fd5b908160209103126101fb575190565b6040513d5f823e3d90fd5b9060048110156122b65760011b01905f90565b611eaf565b8181029291811591840414171561224b57565b604051906122dd604083610d6f565b600b82526a036b9b3973b30b63ab29d160ad1b6020830152565b60405190612306604083610d6f565b6007825266436f737420203160c81b6020830152565b6001600160401b038111610d345760051b60200190565b9061233d8261231c565b61234a6040519182610d6f565b828152809261235b601f199161231c565b0190602036910137565b60405190612374604083610d6f565b600d82526c02a35b71021b7bab73a32b91d1609d1b6020830152565b63ffffffff1663ffffffff811461224b5760010190565b5f19811461224b5760010190565b80518210156122b65760209160051b010190565b90815491600160401b831015610d3457600183018082558310156122b6575f9081526020902090910155565b9190820391821161224b57565b90926080926102c795948352602083015260018060a01b031660408201528160608201520190610a04565b91610c1a93916124549361244461058884336129b7565b61244f838383612a93565b61321e565b612fc3565b91949092612465612c42565b6019549661247b885f52600c60205260405f2090565b908882556124d488600284016124988163ffffffff198154169055565b6124a588600187016126bd565b6124b289601587016126bd565b9067ffffffff0000000082549160201b169067ffffffff000000001916179055565b600382015f5b600481106126345750508680612623575b6126145761253284600b840161250d8a829060ff801983541691151516179055565b8054610100600160a81b03191660089290921b610100600160a81b0316919091179055565b600c82015f5b600481106125ed57505050601601805460ff1916600117905561255f600160195401601955565b601a54806125a5575b50907f0a93fa2f927a74a47cf4ad0fc6b28a9facb0a73c2599f408488a39328c554b18946125a092600d5497604051968796876128b6565b0390a3565b91909134106125de575f808080346125c76106a2601b5460018060a01b031690565b5af16125d1611e80565b50156106c057905f612568565b630fb2c9dd60e41b5f5260045ffd5b8061260e6125fd60019386612788565b5161260883866122a3565b906127d3565b01612538565b6318a6b01160e21b5f5260045ffd5b506001600160a01b038416156124eb565b8061265561264460019388612788565b5161264f83866122a3565b90612799565b016124da565b634e487b7160e01b5f525f60045260245ffd5b601f821161267b57505050565b5f5260205f20906020601f840160051c830193106126b3575b601f0160051c01905b8181106126a8575050565b5f815560010161269d565b9091508190612694565b91909182516001600160401b038111610d34576126e4816126de84546114fb565b8461266e565b6020601f82116001146127235781906127149394955f92612718575b50508160011b915f199060031b1c19161790565b9055565b015190505f80612700565b601f19821690612736845f5260205f2090565b915f5b81811061277057509583600195969710612758575b505050811b019055565b01515f1960f88460031b161c191690555f808061274e565b9192602060018192868b015181550194019201612739565b9060048110156122b65760051b0190565b906127ce578151815560209091015160019190910180546001600160a01b0319166001600160a01b0392909216919091179055565b61265b565b909291926127ce5782519283516001600160401b038111610d3457612802816127fc85546114fb565b8561266e565b6020601f8211600114612845579161283982602093600195610c1a98995f926127185750508160011b915f199060031b1c19161790565b84555b015191016126bd565b601f19821695612858855f5260205f2090565b965f5b81811061289e575092610c1a96976001959386938360209710612886575b505050811b01845561283c565b01515f1960f88460031b161c191690555f8080612879565b8383015189556001909801976020938401930161285b565b93916128e8906128da63ffffffff9399989795996101c088526101c0880190610292565b908682036020880152610292565b965f6040860152166060840152608083015f905b600482106129235750505015156101808201526001600160a01b039091166101a090910152565b8251805182526020908101516001600160a01b0316828201526001916040019301910190916128fc565b5f82815260046020526040902080546001600160a01b0319166001600160a01b0383161790556001600160a01b0361298483611f0f565b6001600160a01b0390921691167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9255f80a4565b6001600160a01b036129c883611f0f565b6001600160a01b0383169116818114939192908415612a09575b505082156129ef57505090565b9091506001600160a01b0390612a0490611d38565b161490565b5f9081526005602090815260408083206001600160a01b039490941683529290529081205460ff169350806129e2565b15612a4057565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b612a9c83611f0f565b6001600160a01b038083169291612ab591168314612a39565b6001600160a01b038316928315612ba857612b2c82612ad88784612b8296613257565b612aee85612ae86106a28a611f0f565b14612a39565b612b13612b03885f52600460205260405f2090565b80546001600160a01b0319169055565b6001600160a01b03165f90815260036020526040902090565b80545f190190556001600160a01b0381165f90815260036020526040902060018154019055612b63855f52600260205260405f2090565b80546001600160a01b0319166001600160a01b03909216919091179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef5f80a4565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b6040516323b872dd60e01b60208201526001600160a01b039283166024820152929091166044830152606480830193909352918152610c1a91612c3d608483610d6f565b61302f565b600b546001600160a01b03163303612c5657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830193909352918152610c1a91612c3d606483610d6f565b5f91908291612d196040518092612d056020830195632d839cb360e21b8752604060248501526064840190610292565b90604483015203601f198101835282610d6f565b51906a636f6e736f6c652e6c6f675afa50565b90604051612d3b602082610d6f565b5f81526001600160a01b038316918215612e0d57610c1a938161245494612d84612d7f612d7b845f52600260205260018060a01b0360405f205416151590565b1590565b61339e565b612d8e828461337c565b5f82815260026020526040902054612daf906001600160a01b03161561339e565b6001600160a01b0383165f90815260036020526040902060018154019055612de383612b63845f52600260205260405f2090565b5f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4613159565b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b5f818152600260205260409020549192916001600160a01b031615612f14575f52600a60205260405f2082516001600160401b038111610d3457612e99816126de84546114fb565b6020601f8211600114612ec85781906127149394955f926127185750508160011b915f199060031b1c19161790565b601f19821690612edb845f5260205f2090565b915f5b818110612efc5750958360019596971061275857505050811b019055565b9192602060018192868b015181550194019201612ede565b60405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608490fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b15612fca57565b60405162461bcd60e51b815280612fe360048201612f70565b0390fd5b5f81815260026020526040902054613009906001600160a01b03161515611ec3565b5f52600a60205261301c60405f2061183c565b5f60405161302b602082610d6f565b5290565b9061308f9160018060a01b03165f806040519361304d604086610d6f565b602085527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564602086015260208151910182855af1613089611e80565b9161356a565b80518061309a575050565b6020908201829003126101fb57602001516130b481610c02565b156130bb57565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b908160209103126101fb57516102c7816101e9565b6001600160a01b0391821681529116602082015260408101919091526080606082018190526102c792910190610292565b91823b1561321657613187926020925f604051809681958294630a85bd0160e11b8452843360048601613128565b03926001600160a01b03165af15f91816131e5575b506131cf576131a9611e80565b805190816131ca5760405162461bcd60e51b815280612fe360048201612f70565b602001fd5b6001600160e01b031916630a85bd0160e11b1490565b61320891925060203d60201161320f575b6132008183610d6f565b810190613113565b905f61319c565b503d6131f6565b505050600190565b919290803b1561324e57613187935f60209460405196879586948593630a85bd0160e11b85523360048601613128565b50505050600190565b9091906001600160a01b03811690816132a15750613274826133ea565b6001600160a01b0383168061328f575050610c1a915061347b565b03613298575050565b610c1a91613443565b6001600160a01b03841682036132b8575b50613274565b6132c181611f31565b5f1981019190821161224b575f91613319613326928685526007602052604085205483810361332d575b50846132ff885f52600760205260405f2090565b556001600160a01b03165f90815260066020526040902090565b905f5260205260405f2090565b555f6132b2565b868652600660205260408620848752602052613375604087205480613366846133198760018060a01b03165f52600660205260405f2090565b555f52600760205260405f2090565b555f6132eb565b90613386816133ea565b6001600160a01b03821661329857610c1a915061347b565b156133a557565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b600854815f52600960205260405f2055600854600160401b811015610d3457600181016008556008548110156122b65760085f527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b9061344d82611f31565b9160018060a01b03165f52600660205260405f20825f526020528060405f20555f52600760205260405f2055565b6008545f1981019181831161224b57805f5260096020528160405f20549310156122b65760085f527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee2820154918310156122b6577ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee383018290555f91825260096020526040808320939093558152908120556008548015613556575f198101906008548210156122b65760085f8181527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee29092019190915555565b634e487b7160e01b5f52603160045260245ffd5b919290156135cc575081511561357e575090565b3b156135875790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156135df5750805190602001fd5b60405162461bcd60e51b8152908190612fe390600483016102b656fea26469706673582212202a0b3d60b439f460d16f8edd02e1cde1edea261ea5c7d4916dd0359a3651c59164736f6c634300081a0033a2646970667358221220d2e0c5b1867601a07258e014103cb37f4a96ea2c059220817b05cc58675149f964736f6c634300081a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createNewEvent(string,string,(uint256,string,string,uint8,string,string,string,uint256,string,uint256,uint256,address))": {
        "details": "Create A new Event."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 601,
        "contract": "src/EventManager.sol:EventManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13255,
        "contract": "src/EventManager.sol:EventManager",
        "label": "_events",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 13258,
        "contract": "src/EventManager.sol:EventManager",
        "label": "_counter",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)3057_storage"
      },
      {
        "astId": 13263,
        "contract": "src/EventManager.sol:EventManager",
        "label": "_ownersEvents",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 13269,
        "contract": "src/EventManager.sol:EventManager",
        "label": "_ticketSales",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_struct(TicketSale)13251_storage)dyn_storage)"
      },
      {
        "astId": 13271,
        "contract": "src/EventManager.sol:EventManager",
        "label": "eventCreationFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 13284,
        "contract": "src/EventManager.sol:EventManager",
        "label": "ticketCategoryCreationFee",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 13287,
        "contract": "src/EventManager.sol:EventManager",
        "label": "ticketTransactionFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(TicketSale)13251_storage)dyn_storage": {
        "base": "t_struct(TicketSale)13251_storage",
        "encoding": "dynamic_array",
        "label": "struct EventManager.TicketSale[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(TicketSale)13251_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EventManager.TicketSale[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(TicketSale)13251_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(Counter)3057_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3056,
            "contract": "src/EventManager.sol:EventManager",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TicketSale)13251_storage": {
        "encoding": "inplace",
        "label": "struct EventManager.TicketSale",
        "members": [
          {
            "astId": 13246,
            "contract": "src/EventManager.sol:EventManager",
            "label": "eventId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13248,
            "contract": "src/EventManager.sol:EventManager",
            "label": "startTicket",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13250,
            "contract": "src/EventManager.sol:EventManager",
            "label": "endTicket",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}